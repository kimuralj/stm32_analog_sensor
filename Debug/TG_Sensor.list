
TG_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d50  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002ed8  08002ed8  00012ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ef0  08002ef0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ef0  08002ef0  00012ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ef8  08002ef8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ef8  08002ef8  00012ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002efc  08002efc  00012efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000cc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d8  200000d8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008cac  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014d7  00000000  00000000  00028ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000728  00000000  00000000  0002a1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006b0  00000000  00000000  0002a8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002101f  00000000  00000000  0002af98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008f28  00000000  00000000  0004bfb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce45c  00000000  00000000  00054edf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012333b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c9c  00000000  00000000  0012338c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002ec0 	.word	0x08002ec0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002ec0 	.word	0x08002ec0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	InitializeVariables();
 80004d0:	f000 fae0 	bl	8000a94 <InitializeVariables>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fcbc 	bl	8000e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f888 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f96c 	bl	80007b8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004e0:	f000 f8ee 	bl	80006c0 <MX_ADC1_Init>
  MX_UART5_Init();
 80004e4:	f000 f93e 	bl	8000764 <MX_UART5_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if ( (HAL_GetTick() - Previous_Send_Time) > MESSAGE_RATE)
 80004e8:	f000 fd18 	bl	8000f1c <HAL_GetTick>
 80004ec:	4602      	mov	r2, r0
 80004ee:	4b35      	ldr	r3, [pc, #212]	; (80005c4 <main+0xf8>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	1ad3      	subs	r3, r2, r3
 80004f4:	2b0a      	cmp	r3, #10
 80004f6:	d90e      	bls.n	8000516 <main+0x4a>
	{
	  Pot_Resistance = GetResistanceValue(&hadc1);
 80004f8:	4833      	ldr	r0, [pc, #204]	; (80005c8 <main+0xfc>)
 80004fa:	f000 faed 	bl	8000ad8 <GetResistanceValue>
 80004fe:	eef0 7a40 	vmov.f32	s15, s0
 8000502:	4b32      	ldr	r3, [pc, #200]	; (80005cc <main+0x100>)
 8000504:	edc3 7a00 	vstr	s15, [r3]
	  SendNewMessage(Pot_Resistance);
 8000508:	4b30      	ldr	r3, [pc, #192]	; (80005cc <main+0x100>)
 800050a:	edd3 7a00 	vldr	s15, [r3]
 800050e:	eeb0 0a67 	vmov.f32	s0, s15
 8000512:	f000 fb33 	bl	8000b7c <SendNewMessage>
	}

    Button_State = GetButtonState(B1_GPIO_Port, B1_Pin, Previous_Button_State);
 8000516:	4b2e      	ldr	r3, [pc, #184]	; (80005d0 <main+0x104>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	461a      	mov	r2, r3
 800051c:	2101      	movs	r1, #1
 800051e:	482d      	ldr	r0, [pc, #180]	; (80005d4 <main+0x108>)
 8000520:	f000 fb08 	bl	8000b34 <GetButtonState>
 8000524:	4603      	mov	r3, r0
 8000526:	461a      	mov	r2, r3
 8000528:	4b2b      	ldr	r3, [pc, #172]	; (80005d8 <main+0x10c>)
 800052a:	701a      	strb	r2, [r3, #0]

    if ( (Previous_Button_State == GPIO_PIN_RESET) &&
 800052c:	4b28      	ldr	r3, [pc, #160]	; (80005d0 <main+0x104>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d10a      	bne.n	800054a <main+0x7e>
    	 (Button_State == GPIO_PIN_SET) )
 8000534:	4b28      	ldr	r3, [pc, #160]	; (80005d8 <main+0x10c>)
 8000536:	781b      	ldrb	r3, [r3, #0]
    if ( (Previous_Button_State == GPIO_PIN_RESET) &&
 8000538:	2b01      	cmp	r3, #1
 800053a:	d106      	bne.n	800054a <main+0x7e>
    {
    	SendNewMessage(Pot_Resistance);
 800053c:	4b23      	ldr	r3, [pc, #140]	; (80005cc <main+0x100>)
 800053e:	edd3 7a00 	vldr	s15, [r3]
 8000542:	eeb0 0a67 	vmov.f32	s0, s15
 8000546:	f000 fb19 	bl	8000b7c <SendNewMessage>
    }
    Previous_Button_State = Button_State;
 800054a:	4b23      	ldr	r3, [pc, #140]	; (80005d8 <main+0x10c>)
 800054c:	781a      	ldrb	r2, [r3, #0]
 800054e:	4b20      	ldr	r3, [pc, #128]	; (80005d0 <main+0x104>)
 8000550:	701a      	strb	r2, [r3, #0]


    if (HAL_UART_GetState(&huart5) == HAL_UART_STATE_READY)
 8000552:	4822      	ldr	r0, [pc, #136]	; (80005dc <main+0x110>)
 8000554:	f002 f987 	bl	8002866 <HAL_UART_GetState>
 8000558:	4603      	mov	r3, r0
 800055a:	2b20      	cmp	r3, #32
 800055c:	d116      	bne.n	800058c <main+0xc0>
    {
    	HAL_UART_Receive(&huart5, Buffer, BUFFER_SIZE, HAL_MAX_DELAY);
 800055e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000562:	220d      	movs	r2, #13
 8000564:	491e      	ldr	r1, [pc, #120]	; (80005e0 <main+0x114>)
 8000566:	481d      	ldr	r0, [pc, #116]	; (80005dc <main+0x110>)
 8000568:	f002 f8db 	bl	8002722 <HAL_UART_Receive>
    	if(Buffer[0] == 0xFF)
 800056c:	4b1c      	ldr	r3, [pc, #112]	; (80005e0 <main+0x114>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2bff      	cmp	r3, #255	; 0xff
 8000572:	d10b      	bne.n	800058c <main+0xc0>
    	{
    		SendNewMessage(Pot_Resistance);
 8000574:	4b15      	ldr	r3, [pc, #84]	; (80005cc <main+0x100>)
 8000576:	edd3 7a00 	vldr	s15, [r3]
 800057a:	eeb0 0a67 	vmov.f32	s0, s15
 800057e:	f000 fafd 	bl	8000b7c <SendNewMessage>
    		memset(&Buffer, 0, sizeof(Buffer));
 8000582:	220d      	movs	r2, #13
 8000584:	2100      	movs	r1, #0
 8000586:	4816      	ldr	r0, [pc, #88]	; (80005e0 <main+0x114>)
 8000588:	f002 fc92 	bl	8002eb0 <memset>
    	}
    }

    // Visual feedback for Analog Read and Button Read
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, ((Pot_Resistance > 2048) ? GPIO_PIN_SET : GPIO_PIN_RESET));
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <main+0x100>)
 800058e:	edd3 7a00 	vldr	s15, [r3]
 8000592:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80005e4 <main+0x118>
 8000596:	eef4 7ac7 	vcmpe.f32	s15, s14
 800059a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800059e:	bfcc      	ite	gt
 80005a0:	2301      	movgt	r3, #1
 80005a2:	2300      	movle	r3, #0
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	461a      	mov	r2, r3
 80005a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ac:	480e      	ldr	r0, [pc, #56]	; (80005e8 <main+0x11c>)
 80005ae:	f001 fb27 	bl	8001c00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, Button_State);
 80005b2:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <main+0x10c>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	461a      	mov	r2, r3
 80005b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005bc:	480a      	ldr	r0, [pc, #40]	; (80005e8 <main+0x11c>)
 80005be:	f001 fb1f 	bl	8001c00 <HAL_GPIO_WritePin>
	if ( (HAL_GetTick() - Previous_Send_Time) > MESSAGE_RATE)
 80005c2:	e791      	b.n	80004e8 <main+0x1c>
 80005c4:	200000c0 	.word	0x200000c0
 80005c8:	20000028 	.word	0x20000028
 80005cc:	200000b4 	.word	0x200000b4
 80005d0:	200000b9 	.word	0x200000b9
 80005d4:	40020000 	.word	0x40020000
 80005d8:	200000b8 	.word	0x200000b8
 80005dc:	20000070 	.word	0x20000070
 80005e0:	200000c4 	.word	0x200000c4
 80005e4:	45000000 	.word	0x45000000
 80005e8:	40020c00 	.word	0x40020c00

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	; 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fc58 	bl	8002eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <SystemClock_Config+0xcc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a27      	ldr	r2, [pc, #156]	; (80006b8 <SystemClock_Config+0xcc>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <SystemClock_Config+0xcc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b22      	ldr	r3, [pc, #136]	; (80006bc <SystemClock_Config+0xd0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a21      	ldr	r2, [pc, #132]	; (80006bc <SystemClock_Config+0xd0>)
 8000636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <SystemClock_Config+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000648:	2301      	movs	r3, #1
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000656:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800065c:	2308      	movs	r3, #8
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000660:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000664:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800066a:	2307      	movs	r3, #7
 800066c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	4618      	mov	r0, r3
 8000674:	f001 fade 	bl	8001c34 <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800067e:	f000 faa7 	bl	8000bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000686:	2302      	movs	r3, #2
 8000688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000692:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000698:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	2105      	movs	r1, #5
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 fd3f 	bl	8002124 <HAL_RCC_ClockConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006ac:	f000 fa90 	bl	8000bd0 <Error_Handler>
  }
}
 80006b0:	bf00      	nop
 80006b2:	3750      	adds	r7, #80	; 0x50
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c6:	463b      	mov	r3, r7
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006d2:	4b21      	ldr	r3, [pc, #132]	; (8000758 <MX_ADC1_Init+0x98>)
 80006d4:	4a21      	ldr	r2, [pc, #132]	; (800075c <MX_ADC1_Init+0x9c>)
 80006d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <MX_ADC1_Init+0x98>)
 80006da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006e0:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <MX_ADC1_Init+0x98>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <MX_ADC1_Init+0x98>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <MX_ADC1_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <MX_ADC1_Init+0x98>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <MX_ADC1_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000700:	4b15      	ldr	r3, [pc, #84]	; (8000758 <MX_ADC1_Init+0x98>)
 8000702:	4a17      	ldr	r2, [pc, #92]	; (8000760 <MX_ADC1_Init+0xa0>)
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_ADC1_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_ADC1_Init+0x98>)
 800070e:	2201      	movs	r2, #1
 8000710:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_ADC1_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_ADC1_Init+0x98>)
 800071c:	2201      	movs	r2, #1
 800071e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000720:	480d      	ldr	r0, [pc, #52]	; (8000758 <MX_ADC1_Init+0x98>)
 8000722:	f000 fc07 	bl	8000f34 <HAL_ADC_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800072c:	f000 fa50 	bl	8000bd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000730:	2301      	movs	r3, #1
 8000732:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000734:	2301      	movs	r3, #1
 8000736:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073c:	463b      	mov	r3, r7
 800073e:	4619      	mov	r1, r3
 8000740:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_ADC1_Init+0x98>)
 8000742:	f000 fda5 	bl	8001290 <HAL_ADC_ConfigChannel>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800074c:	f000 fa40 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000028 	.word	0x20000028
 800075c:	40012000 	.word	0x40012000
 8000760:	0f000001 	.word	0x0f000001

08000764 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_UART5_Init+0x4c>)
 800076a:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <MX_UART5_Init+0x50>)
 800076c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 230400;
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_UART5_Init+0x4c>)
 8000770:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000774:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_UART5_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_UART5_Init+0x4c>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_UART5_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_UART5_Init+0x4c>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_UART5_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_UART5_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_UART5_Init+0x4c>)
 800079c:	f001 fee2 	bl	8002564 <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80007a6:	f000 fa13 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000070 	.word	0x20000070
 80007b4:	40005000 	.word	0x40005000

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08c      	sub	sp, #48	; 0x30
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	61bb      	str	r3, [r7, #24]
 80007d2:	4baa      	ldr	r3, [pc, #680]	; (8000a7c <MX_GPIO_Init+0x2c4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4aa9      	ldr	r2, [pc, #676]	; (8000a7c <MX_GPIO_Init+0x2c4>)
 80007d8:	f043 0310 	orr.w	r3, r3, #16
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4ba7      	ldr	r3, [pc, #668]	; (8000a7c <MX_GPIO_Init+0x2c4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0310 	and.w	r3, r3, #16
 80007e6:	61bb      	str	r3, [r7, #24]
 80007e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	4ba3      	ldr	r3, [pc, #652]	; (8000a7c <MX_GPIO_Init+0x2c4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4aa2      	ldr	r2, [pc, #648]	; (8000a7c <MX_GPIO_Init+0x2c4>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4ba0      	ldr	r3, [pc, #640]	; (8000a7c <MX_GPIO_Init+0x2c4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	617b      	str	r3, [r7, #20]
 8000804:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	4b9c      	ldr	r3, [pc, #624]	; (8000a7c <MX_GPIO_Init+0x2c4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a9b      	ldr	r2, [pc, #620]	; (8000a7c <MX_GPIO_Init+0x2c4>)
 8000810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b99      	ldr	r3, [pc, #612]	; (8000a7c <MX_GPIO_Init+0x2c4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	4b95      	ldr	r3, [pc, #596]	; (8000a7c <MX_GPIO_Init+0x2c4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a94      	ldr	r2, [pc, #592]	; (8000a7c <MX_GPIO_Init+0x2c4>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b92      	ldr	r3, [pc, #584]	; (8000a7c <MX_GPIO_Init+0x2c4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	4b8e      	ldr	r3, [pc, #568]	; (8000a7c <MX_GPIO_Init+0x2c4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a8d      	ldr	r2, [pc, #564]	; (8000a7c <MX_GPIO_Init+0x2c4>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b8b      	ldr	r3, [pc, #556]	; (8000a7c <MX_GPIO_Init+0x2c4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b87      	ldr	r3, [pc, #540]	; (8000a7c <MX_GPIO_Init+0x2c4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a86      	ldr	r2, [pc, #536]	; (8000a7c <MX_GPIO_Init+0x2c4>)
 8000864:	f043 0308 	orr.w	r3, r3, #8
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b84      	ldr	r3, [pc, #528]	; (8000a7c <MX_GPIO_Init+0x2c4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0308 	and.w	r3, r3, #8
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2108      	movs	r1, #8
 800087a:	4881      	ldr	r0, [pc, #516]	; (8000a80 <MX_GPIO_Init+0x2c8>)
 800087c:	f001 f9c0 	bl	8001c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000880:	2201      	movs	r2, #1
 8000882:	2101      	movs	r1, #1
 8000884:	487f      	ldr	r0, [pc, #508]	; (8000a84 <MX_GPIO_Init+0x2cc>)
 8000886:	f001 f9bb 	bl	8001c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800088a:	2200      	movs	r2, #0
 800088c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000890:	487d      	ldr	r0, [pc, #500]	; (8000a88 <MX_GPIO_Init+0x2d0>)
 8000892:	f001 f9b5 	bl	8001c00 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000896:	2308      	movs	r3, #8
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4874      	ldr	r0, [pc, #464]	; (8000a80 <MX_GPIO_Init+0x2c8>)
 80008ae:	f000 fff3 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008b2:	2301      	movs	r3, #1
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	486e      	ldr	r0, [pc, #440]	; (8000a84 <MX_GPIO_Init+0x2cc>)
 80008ca:	f000 ffe5 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008ce:	2308      	movs	r3, #8
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008de:	2305      	movs	r3, #5
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4866      	ldr	r0, [pc, #408]	; (8000a84 <MX_GPIO_Init+0x2cc>)
 80008ea:	f000 ffd5 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008f2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4862      	ldr	r0, [pc, #392]	; (8000a8c <MX_GPIO_Init+0x2d4>)
 8000904:	f000 ffc8 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000908:	2310      	movs	r3, #16
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000918:	2306      	movs	r3, #6
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	485a      	ldr	r0, [pc, #360]	; (8000a8c <MX_GPIO_Init+0x2d4>)
 8000924:	f000 ffb8 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000928:	23e0      	movs	r3, #224	; 0xe0
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000938:	2305      	movs	r3, #5
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4852      	ldr	r0, [pc, #328]	; (8000a8c <MX_GPIO_Init+0x2d4>)
 8000944:	f000 ffa8 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000948:	2304      	movs	r3, #4
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094c:	2300      	movs	r3, #0
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	484d      	ldr	r0, [pc, #308]	; (8000a90 <MX_GPIO_Init+0x2d8>)
 800095c:	f000 ff9c 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000960:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000972:	2305      	movs	r3, #5
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4844      	ldr	r0, [pc, #272]	; (8000a90 <MX_GPIO_Init+0x2d8>)
 800097e:	f000 ff8b 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000982:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000986:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000988:	2301      	movs	r3, #1
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	483b      	ldr	r0, [pc, #236]	; (8000a88 <MX_GPIO_Init+0x2d0>)
 800099c:	f000 ff7c 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 80009a0:	2380      	movs	r3, #128	; 0x80
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009b0:	2306      	movs	r3, #6
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	4832      	ldr	r0, [pc, #200]	; (8000a84 <MX_GPIO_Init+0x2cc>)
 80009bc:	f000 ff6c 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c6:	2300      	movs	r3, #0
 80009c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	482d      	ldr	r0, [pc, #180]	; (8000a8c <MX_GPIO_Init+0x2d4>)
 80009d6:	f000 ff5f 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009da:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009ec:	230a      	movs	r3, #10
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	4825      	ldr	r0, [pc, #148]	; (8000a8c <MX_GPIO_Init+0x2d4>)
 80009f8:	f000 ff4e 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a0e:	2308      	movs	r3, #8
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	481a      	ldr	r0, [pc, #104]	; (8000a84 <MX_GPIO_Init+0x2cc>)
 8000a1a:	f000 ff3d 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a1e:	2320      	movs	r3, #32
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a22:	2300      	movs	r3, #0
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4815      	ldr	r0, [pc, #84]	; (8000a88 <MX_GPIO_Init+0x2d0>)
 8000a32:	f000 ff31 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a36:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a3c:	2312      	movs	r3, #18
 8000a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a48:	2304      	movs	r3, #4
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	480f      	ldr	r0, [pc, #60]	; (8000a90 <MX_GPIO_Init+0x2d8>)
 8000a54:	f000 ff20 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a5c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4804      	ldr	r0, [pc, #16]	; (8000a80 <MX_GPIO_Init+0x2c8>)
 8000a6e:	f000 ff13 	bl	8001898 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a72:	bf00      	nop
 8000a74:	3730      	adds	r7, #48	; 0x30
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40021000 	.word	0x40021000
 8000a84:	40020800 	.word	0x40020800
 8000a88:	40020c00 	.word	0x40020c00
 8000a8c:	40020000 	.word	0x40020000
 8000a90:	40020400 	.word	0x40020400

08000a94 <InitializeVariables>:

/* USER CODE BEGIN 4 */
static void InitializeVariables(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
	Pot_Resistance = 0;
 8000a98:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <InitializeVariables+0x30>)
 8000a9a:	f04f 0200 	mov.w	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
	Button_State = GPIO_PIN_RESET;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <InitializeVariables+0x34>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
	Previous_Button_State = GPIO_PIN_RESET;
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <InitializeVariables+0x38>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	701a      	strb	r2, [r3, #0]
	Previous_Time = 0;
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <InitializeVariables+0x3c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
	Previous_Send_Time = 0;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <InitializeVariables+0x40>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	200000b4 	.word	0x200000b4
 8000ac8:	200000b8 	.word	0x200000b8
 8000acc:	200000b9 	.word	0x200000b9
 8000ad0:	200000bc 	.word	0x200000bc
 8000ad4:	200000c0 	.word	0x200000c0

08000ad8 <GetResistanceValue>:

static float GetResistanceValue(ADC_HandleTypeDef* adc_var)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	float ret_val = 0;
 8000ae0:	f04f 0300 	mov.w	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]

	HAL_ADC_Start(adc_var);
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f000 fa68 	bl	8000fbc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(adc_var, 100);
 8000aec:	2164      	movs	r1, #100	; 0x64
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 fb36 	bl	8001160 <HAL_ADC_PollForConversion>
	ret_val = (float) HAL_ADC_GetValue(adc_var);
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f000 fbbe 	bl	8001276 <HAL_ADC_GetValue>
 8000afa:	ee07 0a90 	vmov	s15, r0
 8000afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b02:	edc7 7a03 	vstr	s15, [r7, #12]

	ret_val = (10 * ret_val)/4095;
 8000b06:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b0a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000b0e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b12:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000b30 <GetResistanceValue+0x58>
 8000b16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b1a:	edc7 7a03 	vstr	s15, [r7, #12]

	return ret_val;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	ee07 3a90 	vmov	s15, r3
}
 8000b24:	eeb0 0a67 	vmov.f32	s0, s15
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	457ff000 	.word	0x457ff000

08000b34 <GetButtonState>:


static GPIO_PinState GetButtonState(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState previous_state)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	807b      	strh	r3, [r7, #2]
 8000b40:	4613      	mov	r3, r2
 8000b42:	707b      	strb	r3, [r7, #1]
	GPIO_PinState ret_val;
	uint32_t current_time;

	ret_val = previous_state;
 8000b44:	787b      	ldrb	r3, [r7, #1]
 8000b46:	73fb      	strb	r3, [r7, #15]

    current_time = HAL_GetTick();
 8000b48:	f000 f9e8 	bl	8000f1c <HAL_GetTick>
 8000b4c:	60b8      	str	r0, [r7, #8]
    if ( (current_time - Previous_Time) > READING_RATE)
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <GetButtonState+0x44>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	2b64      	cmp	r3, #100	; 0x64
 8000b58:	d909      	bls.n	8000b6e <GetButtonState+0x3a>
    {
		ret_val = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8000b5a:	887b      	ldrh	r3, [r7, #2]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f001 f836 	bl	8001bd0 <HAL_GPIO_ReadPin>
 8000b64:	4603      	mov	r3, r0
 8000b66:	73fb      	strb	r3, [r7, #15]
		Previous_Time = current_time;
 8000b68:	4a03      	ldr	r2, [pc, #12]	; (8000b78 <GetButtonState+0x44>)
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	6013      	str	r3, [r2, #0]
    }

    return ret_val;
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200000bc 	.word	0x200000bc

08000b7c <SendNewMessage>:

static void SendNewMessage(float value)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t payload[BUFFER_SIZE];

	uint8_t * byte_ptr = (uint8_t *) &value;
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	61fb      	str	r3, [r7, #28]

	memset(&payload, 0, sizeof(payload));
 8000b8a:	f107 030c 	add.w	r3, r7, #12
 8000b8e:	220d      	movs	r2, #13
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f002 f98c 	bl	8002eb0 <memset>

	payload[0] = 5;
 8000b98:	2305      	movs	r3, #5
 8000b9a:	733b      	strb	r3, [r7, #12]
//	payload[1] = (uint8_t)(value & 0x000000FF);
//	payload[2] = (uint8_t)((value & 0x0000FF00) >> 8);
//	payload[3] = (uint8_t)((value & 0x00FF0000) >> 16);
//	payload[4] = (uint8_t)((value & 0xFF000000) >> 24);
	payload[1] = byte_ptr[3];
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	78db      	ldrb	r3, [r3, #3]
 8000ba0:	737b      	strb	r3, [r7, #13]
	payload[2] = byte_ptr[2];
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	789b      	ldrb	r3, [r3, #2]
 8000ba6:	73bb      	strb	r3, [r7, #14]
	payload[3] = byte_ptr[1];
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	785b      	ldrb	r3, [r3, #1]
 8000bac:	73fb      	strb	r3, [r7, #15]
	payload[4] = byte_ptr[0];
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	743b      	strb	r3, [r7, #16]

	HAL_UART_Transmit(&huart5, payload, sizeof(payload), 100);
 8000bb4:	f107 010c 	add.w	r1, r7, #12
 8000bb8:	2364      	movs	r3, #100	; 0x64
 8000bba:	220d      	movs	r2, #13
 8000bbc:	4803      	ldr	r0, [pc, #12]	; (8000bcc <SendNewMessage+0x50>)
 8000bbe:	f001 fd1e 	bl	80025fe <HAL_UART_Transmit>
}
 8000bc2:	bf00      	nop
 8000bc4:	3720      	adds	r7, #32
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000070 	.word	0x20000070

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <Error_Handler+0x8>
	...

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <HAL_MspInit+0x4c>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	4a0f      	ldr	r2, [pc, #60]	; (8000c28 <HAL_MspInit+0x4c>)
 8000bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <HAL_MspInit+0x4c>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	603b      	str	r3, [r7, #0]
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <HAL_MspInit+0x4c>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <HAL_MspInit+0x4c>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_MspInit+0x4c>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c1a:	2007      	movs	r0, #7
 8000c1c:	f000 fe08 	bl	8001830 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40023800 	.word	0x40023800

08000c2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a17      	ldr	r2, [pc, #92]	; (8000ca8 <HAL_ADC_MspInit+0x7c>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d127      	bne.n	8000c9e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	4b16      	ldr	r3, [pc, #88]	; (8000cac <HAL_ADC_MspInit+0x80>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	4a15      	ldr	r2, [pc, #84]	; (8000cac <HAL_ADC_MspInit+0x80>)
 8000c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5e:	4b13      	ldr	r3, [pc, #76]	; (8000cac <HAL_ADC_MspInit+0x80>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <HAL_ADC_MspInit+0x80>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <HAL_ADC_MspInit+0x80>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <HAL_ADC_MspInit+0x80>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c86:	2302      	movs	r3, #2
 8000c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <HAL_ADC_MspInit+0x84>)
 8000c9a:	f000 fdfd 	bl	8001898 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	; 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40012000 	.word	0x40012000
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020000 	.word	0x40020000

08000cb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a28      	ldr	r2, [pc, #160]	; (8000d74 <HAL_UART_MspInit+0xc0>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d14a      	bne.n	8000d6c <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <HAL_UART_MspInit+0xc4>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	4a26      	ldr	r2, [pc, #152]	; (8000d78 <HAL_UART_MspInit+0xc4>)
 8000ce0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce6:	4b24      	ldr	r3, [pc, #144]	; (8000d78 <HAL_UART_MspInit+0xc4>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <HAL_UART_MspInit+0xc4>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a1f      	ldr	r2, [pc, #124]	; (8000d78 <HAL_UART_MspInit+0xc4>)
 8000cfc:	f043 0304 	orr.w	r3, r3, #4
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <HAL_UART_MspInit+0xc4>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0304 	and.w	r3, r3, #4
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <HAL_UART_MspInit+0xc4>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a18      	ldr	r2, [pc, #96]	; (8000d78 <HAL_UART_MspInit+0xc4>)
 8000d18:	f043 0308 	orr.w	r3, r3, #8
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <HAL_UART_MspInit+0xc4>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0308 	and.w	r3, r3, #8
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000d3c:	2308      	movs	r3, #8
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	480d      	ldr	r0, [pc, #52]	; (8000d7c <HAL_UART_MspInit+0xc8>)
 8000d48:	f000 fda6 	bl	8001898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000d5c:	2308      	movs	r3, #8
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	4806      	ldr	r0, [pc, #24]	; (8000d80 <HAL_UART_MspInit+0xcc>)
 8000d68:	f000 fd96 	bl	8001898 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000d6c:	bf00      	nop
 8000d6e:	3728      	adds	r7, #40	; 0x28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40005000 	.word	0x40005000
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020800 	.word	0x40020800
 8000d80:	40020c00 	.word	0x40020c00

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <NMI_Handler+0x4>

08000d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <MemManage_Handler+0x4>

08000d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd0:	f000 f890 	bl	8000ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <SystemInit+0x20>)
 8000dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de2:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <SystemInit+0x20>)
 8000de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e00:	480d      	ldr	r0, [pc, #52]	; (8000e38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e02:	490e      	ldr	r1, [pc, #56]	; (8000e3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e04:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e08:	e002      	b.n	8000e10 <LoopCopyDataInit>

08000e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0e:	3304      	adds	r3, #4

08000e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e14:	d3f9      	bcc.n	8000e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e16:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e18:	4c0b      	ldr	r4, [pc, #44]	; (8000e48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e1c:	e001      	b.n	8000e22 <LoopFillZerobss>

08000e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e20:	3204      	adds	r2, #4

08000e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e24:	d3fb      	bcc.n	8000e1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e26:	f7ff ffd7 	bl	8000dd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e2a:	f002 f81d 	bl	8002e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2e:	f7ff fb4d 	bl	80004cc <main>
  bx  lr    
 8000e32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e40:	08002f00 	.word	0x08002f00
  ldr r2, =_sbss
 8000e44:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e48:	200000d8 	.word	0x200000d8

08000e4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC_IRQHandler>
	...

08000e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e54:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <HAL_Init+0x40>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <HAL_Init+0x40>)
 8000e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <HAL_Init+0x40>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <HAL_Init+0x40>)
 8000e66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <HAL_Init+0x40>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <HAL_Init+0x40>)
 8000e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f000 fcd9 	bl	8001830 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f000 f808 	bl	8000e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e84:	f7ff feaa 	bl	8000bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40023c00 	.word	0x40023c00

08000e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_InitTick+0x54>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_InitTick+0x58>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 fce3 	bl	800187e <HAL_SYSTICK_Config>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00e      	b.n	8000ee0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b0f      	cmp	r3, #15
 8000ec6:	d80a      	bhi.n	8000ede <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ed0:	f000 fcb9 	bl	8001846 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed4:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <HAL_InitTick+0x5c>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e000      	b.n	8000ee0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	20000004 	.word	0x20000004

08000ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x20>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_IncTick+0x24>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <HAL_IncTick+0x24>)
 8000f06:	6013      	str	r3, [r2, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000008 	.word	0x20000008
 8000f18:	200000d4 	.word	0x200000d4

08000f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <HAL_GetTick+0x14>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	200000d4 	.word	0x200000d4

08000f34 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d101      	bne.n	8000f4a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e033      	b.n	8000fb2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d109      	bne.n	8000f66 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff fe6a 	bl	8000c2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	f003 0310 	and.w	r3, r3, #16
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d118      	bne.n	8000fa4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f7a:	f023 0302 	bic.w	r3, r3, #2
 8000f7e:	f043 0202 	orr.w	r2, r3, #2
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 faa4 	bl	80014d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f023 0303 	bic.w	r3, r3, #3
 8000f9a:	f043 0201 	orr.w	r2, r3, #1
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	641a      	str	r2, [r3, #64]	; 0x40
 8000fa2:	e001      	b.n	8000fa8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d101      	bne.n	8000fd6 <HAL_ADC_Start+0x1a>
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	e0b2      	b.n	800113c <HAL_ADC_Start+0x180>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d018      	beq.n	800101e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	689a      	ldr	r2, [r3, #8]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f042 0201 	orr.w	r2, r2, #1
 8000ffa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ffc:	4b52      	ldr	r3, [pc, #328]	; (8001148 <HAL_ADC_Start+0x18c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a52      	ldr	r2, [pc, #328]	; (800114c <HAL_ADC_Start+0x190>)
 8001002:	fba2 2303 	umull	r2, r3, r2, r3
 8001006:	0c9a      	lsrs	r2, r3, #18
 8001008:	4613      	mov	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	4413      	add	r3, r2
 800100e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001010:	e002      	b.n	8001018 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	3b01      	subs	r3, #1
 8001016:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1f9      	bne.n	8001012 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	2b01      	cmp	r3, #1
 800102a:	d17a      	bne.n	8001122 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001034:	f023 0301 	bic.w	r3, r3, #1
 8001038:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800104a:	2b00      	cmp	r3, #0
 800104c:	d007      	beq.n	800105e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001056:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800106a:	d106      	bne.n	800107a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001070:	f023 0206 	bic.w	r2, r3, #6
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	645a      	str	r2, [r3, #68]	; 0x44
 8001078:	e002      	b.n	8001080 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001088:	4b31      	ldr	r3, [pc, #196]	; (8001150 <HAL_ADC_Start+0x194>)
 800108a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001094:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 031f 	and.w	r3, r3, #31
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d12a      	bne.n	80010f8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a2b      	ldr	r2, [pc, #172]	; (8001154 <HAL_ADC_Start+0x198>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d015      	beq.n	80010d8 <HAL_ADC_Start+0x11c>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a29      	ldr	r2, [pc, #164]	; (8001158 <HAL_ADC_Start+0x19c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d105      	bne.n	80010c2 <HAL_ADC_Start+0x106>
 80010b6:	4b26      	ldr	r3, [pc, #152]	; (8001150 <HAL_ADC_Start+0x194>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 031f 	and.w	r3, r3, #31
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d00a      	beq.n	80010d8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a25      	ldr	r2, [pc, #148]	; (800115c <HAL_ADC_Start+0x1a0>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d136      	bne.n	800113a <HAL_ADC_Start+0x17e>
 80010cc:	4b20      	ldr	r3, [pc, #128]	; (8001150 <HAL_ADC_Start+0x194>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0310 	and.w	r3, r3, #16
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d130      	bne.n	800113a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d129      	bne.n	800113a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	e020      	b.n	800113a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a15      	ldr	r2, [pc, #84]	; (8001154 <HAL_ADC_Start+0x198>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d11b      	bne.n	800113a <HAL_ADC_Start+0x17e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d114      	bne.n	800113a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689a      	ldr	r2, [r3, #8]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	e00b      	b.n	800113a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	f043 0210 	orr.w	r2, r3, #16
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f043 0201 	orr.w	r2, r3, #1
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	20000000 	.word	0x20000000
 800114c:	431bde83 	.word	0x431bde83
 8001150:	40012300 	.word	0x40012300
 8001154:	40012000 	.word	0x40012000
 8001158:	40012100 	.word	0x40012100
 800115c:	40012200 	.word	0x40012200

08001160 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800117c:	d113      	bne.n	80011a6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800118c:	d10b      	bne.n	80011a6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f043 0220 	orr.w	r2, r3, #32
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e063      	b.n	800126e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80011a6:	f7ff feb9 	bl	8000f1c <HAL_GetTick>
 80011aa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011ac:	e021      	b.n	80011f2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011b4:	d01d      	beq.n	80011f2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d007      	beq.n	80011cc <HAL_ADC_PollForConversion+0x6c>
 80011bc:	f7ff feae 	bl	8000f1c <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	683a      	ldr	r2, [r7, #0]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d212      	bcs.n	80011f2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d00b      	beq.n	80011f2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f043 0204 	orr.w	r2, r3, #4
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e03d      	b.n	800126e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d1d6      	bne.n	80011ae <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f06f 0212 	mvn.w	r2, #18
 8001208:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d123      	bne.n	800126c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001228:	2b00      	cmp	r3, #0
 800122a:	d11f      	bne.n	800126c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001232:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001236:	2b00      	cmp	r3, #0
 8001238:	d006      	beq.n	8001248 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001244:	2b00      	cmp	r3, #0
 8001246:	d111      	bne.n	800126c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d105      	bne.n	800126c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	f043 0201 	orr.w	r2, r3, #1
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001284:	4618      	mov	r0, r3
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d101      	bne.n	80012ac <HAL_ADC_ConfigChannel+0x1c>
 80012a8:	2302      	movs	r3, #2
 80012aa:	e105      	b.n	80014b8 <HAL_ADC_ConfigChannel+0x228>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2201      	movs	r2, #1
 80012b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b09      	cmp	r3, #9
 80012ba:	d925      	bls.n	8001308 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	68d9      	ldr	r1, [r3, #12]
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	461a      	mov	r2, r3
 80012ca:	4613      	mov	r3, r2
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	3b1e      	subs	r3, #30
 80012d2:	2207      	movs	r2, #7
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43da      	mvns	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	400a      	ands	r2, r1
 80012e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	68d9      	ldr	r1, [r3, #12]
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	4603      	mov	r3, r0
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	4403      	add	r3, r0
 80012fa:	3b1e      	subs	r3, #30
 80012fc:	409a      	lsls	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	430a      	orrs	r2, r1
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	e022      	b.n	800134e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6919      	ldr	r1, [r3, #16]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	b29b      	uxth	r3, r3
 8001314:	461a      	mov	r2, r3
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	2207      	movs	r2, #7
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43da      	mvns	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	400a      	ands	r2, r1
 800132a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6919      	ldr	r1, [r3, #16]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	b29b      	uxth	r3, r3
 800133c:	4618      	mov	r0, r3
 800133e:	4603      	mov	r3, r0
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	4403      	add	r3, r0
 8001344:	409a      	lsls	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	430a      	orrs	r2, r1
 800134c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b06      	cmp	r3, #6
 8001354:	d824      	bhi.n	80013a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	4613      	mov	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	3b05      	subs	r3, #5
 8001368:	221f      	movs	r2, #31
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43da      	mvns	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	400a      	ands	r2, r1
 8001376:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	b29b      	uxth	r3, r3
 8001384:	4618      	mov	r0, r3
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	4613      	mov	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	3b05      	subs	r3, #5
 8001392:	fa00 f203 	lsl.w	r2, r0, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	430a      	orrs	r2, r1
 800139c:	635a      	str	r2, [r3, #52]	; 0x34
 800139e:	e04c      	b.n	800143a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b0c      	cmp	r3, #12
 80013a6:	d824      	bhi.n	80013f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	4613      	mov	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	3b23      	subs	r3, #35	; 0x23
 80013ba:	221f      	movs	r2, #31
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43da      	mvns	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	400a      	ands	r2, r1
 80013c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	4618      	mov	r0, r3
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	3b23      	subs	r3, #35	; 0x23
 80013e4:	fa00 f203 	lsl.w	r2, r0, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	430a      	orrs	r2, r1
 80013ee:	631a      	str	r2, [r3, #48]	; 0x30
 80013f0:	e023      	b.n	800143a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	3b41      	subs	r3, #65	; 0x41
 8001404:	221f      	movs	r2, #31
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43da      	mvns	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	400a      	ands	r2, r1
 8001412:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	b29b      	uxth	r3, r3
 8001420:	4618      	mov	r0, r3
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	3b41      	subs	r3, #65	; 0x41
 800142e:	fa00 f203 	lsl.w	r2, r0, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	430a      	orrs	r2, r1
 8001438:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800143a:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <HAL_ADC_ConfigChannel+0x234>)
 800143c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a21      	ldr	r2, [pc, #132]	; (80014c8 <HAL_ADC_ConfigChannel+0x238>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d109      	bne.n	800145c <HAL_ADC_ConfigChannel+0x1cc>
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b12      	cmp	r3, #18
 800144e:	d105      	bne.n	800145c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a19      	ldr	r2, [pc, #100]	; (80014c8 <HAL_ADC_ConfigChannel+0x238>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d123      	bne.n	80014ae <HAL_ADC_ConfigChannel+0x21e>
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b10      	cmp	r3, #16
 800146c:	d003      	beq.n	8001476 <HAL_ADC_ConfigChannel+0x1e6>
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b11      	cmp	r3, #17
 8001474:	d11b      	bne.n	80014ae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b10      	cmp	r3, #16
 8001488:	d111      	bne.n	80014ae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <HAL_ADC_ConfigChannel+0x23c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a10      	ldr	r2, [pc, #64]	; (80014d0 <HAL_ADC_ConfigChannel+0x240>)
 8001490:	fba2 2303 	umull	r2, r3, r2, r3
 8001494:	0c9a      	lsrs	r2, r3, #18
 8001496:	4613      	mov	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014a0:	e002      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f9      	bne.n	80014a2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	40012300 	.word	0x40012300
 80014c8:	40012000 	.word	0x40012000
 80014cc:	20000000 	.word	0x20000000
 80014d0:	431bde83 	.word	0x431bde83

080014d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014dc:	4b79      	ldr	r3, [pc, #484]	; (80016c4 <ADC_Init+0x1f0>)
 80014de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	431a      	orrs	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001508:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6859      	ldr	r1, [r3, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	021a      	lsls	r2, r3, #8
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800152c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6859      	ldr	r1, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800154e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6899      	ldr	r1, [r3, #8]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68da      	ldr	r2, [r3, #12]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001566:	4a58      	ldr	r2, [pc, #352]	; (80016c8 <ADC_Init+0x1f4>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d022      	beq.n	80015b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800157a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6899      	ldr	r1, [r3, #8]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800159c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6899      	ldr	r1, [r3, #8]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	e00f      	b.n	80015d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 0202 	bic.w	r2, r2, #2
 80015e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6899      	ldr	r1, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	7e1b      	ldrb	r3, [r3, #24]
 80015ec:	005a      	lsls	r2, r3, #1
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d01b      	beq.n	8001638 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800160e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800161e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6859      	ldr	r1, [r3, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	3b01      	subs	r3, #1
 800162c:	035a      	lsls	r2, r3, #13
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	430a      	orrs	r2, r1
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	e007      	b.n	8001648 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001646:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001656:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	3b01      	subs	r3, #1
 8001664:	051a      	lsls	r2, r3, #20
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	430a      	orrs	r2, r1
 800166c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800167c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6899      	ldr	r1, [r3, #8]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800168a:	025a      	lsls	r2, r3, #9
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6899      	ldr	r1, [r3, #8]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	029a      	lsls	r2, r3, #10
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	609a      	str	r2, [r3, #8]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	40012300 	.word	0x40012300
 80016c8:	0f000001 	.word	0x0f000001

080016cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e8:	4013      	ands	r3, r2
 80016ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fe:	4a04      	ldr	r2, [pc, #16]	; (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	60d3      	str	r3, [r2, #12]
}
 8001704:	bf00      	nop
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <__NVIC_GetPriorityGrouping+0x18>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	0a1b      	lsrs	r3, r3, #8
 800171e:	f003 0307 	and.w	r3, r3, #7
}
 8001722:	4618      	mov	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	6039      	str	r1, [r7, #0]
 800173a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001740:	2b00      	cmp	r3, #0
 8001742:	db0a      	blt.n	800175a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	b2da      	uxtb	r2, r3
 8001748:	490c      	ldr	r1, [pc, #48]	; (800177c <__NVIC_SetPriority+0x4c>)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	0112      	lsls	r2, r2, #4
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	440b      	add	r3, r1
 8001754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001758:	e00a      	b.n	8001770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	b2da      	uxtb	r2, r3
 800175e:	4908      	ldr	r1, [pc, #32]	; (8001780 <__NVIC_SetPriority+0x50>)
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	3b04      	subs	r3, #4
 8001768:	0112      	lsls	r2, r2, #4
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	440b      	add	r3, r1
 800176e:	761a      	strb	r2, [r3, #24]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	e000e100 	.word	0xe000e100
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001784:	b480      	push	{r7}
 8001786:	b089      	sub	sp, #36	; 0x24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f1c3 0307 	rsb	r3, r3, #7
 800179e:	2b04      	cmp	r3, #4
 80017a0:	bf28      	it	cs
 80017a2:	2304      	movcs	r3, #4
 80017a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3304      	adds	r3, #4
 80017aa:	2b06      	cmp	r3, #6
 80017ac:	d902      	bls.n	80017b4 <NVIC_EncodePriority+0x30>
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3b03      	subs	r3, #3
 80017b2:	e000      	b.n	80017b6 <NVIC_EncodePriority+0x32>
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43da      	mvns	r2, r3
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	401a      	ands	r2, r3
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	fa01 f303 	lsl.w	r3, r1, r3
 80017d6:	43d9      	mvns	r1, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	4313      	orrs	r3, r2
         );
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3724      	adds	r7, #36	; 0x24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017fc:	d301      	bcc.n	8001802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017fe:	2301      	movs	r3, #1
 8001800:	e00f      	b.n	8001822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001802:	4a0a      	ldr	r2, [pc, #40]	; (800182c <SysTick_Config+0x40>)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3b01      	subs	r3, #1
 8001808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800180a:	210f      	movs	r1, #15
 800180c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001810:	f7ff ff8e 	bl	8001730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <SysTick_Config+0x40>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800181a:	4b04      	ldr	r3, [pc, #16]	; (800182c <SysTick_Config+0x40>)
 800181c:	2207      	movs	r2, #7
 800181e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	e000e010 	.word	0xe000e010

08001830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ff47 	bl	80016cc <__NVIC_SetPriorityGrouping>
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001846:	b580      	push	{r7, lr}
 8001848:	b086      	sub	sp, #24
 800184a:	af00      	add	r7, sp, #0
 800184c:	4603      	mov	r3, r0
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
 8001852:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001858:	f7ff ff5c 	bl	8001714 <__NVIC_GetPriorityGrouping>
 800185c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	68b9      	ldr	r1, [r7, #8]
 8001862:	6978      	ldr	r0, [r7, #20]
 8001864:	f7ff ff8e 	bl	8001784 <NVIC_EncodePriority>
 8001868:	4602      	mov	r2, r0
 800186a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff5d 	bl	8001730 <__NVIC_SetPriority>
}
 8001876:	bf00      	nop
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffb0 	bl	80017ec <SysTick_Config>
 800188c:	4603      	mov	r3, r0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
 80018b2:	e16b      	b.n	8001b8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018b4:	2201      	movs	r2, #1
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	f040 815a 	bne.w	8001b86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d005      	beq.n	80018ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d130      	bne.n	800194c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	2203      	movs	r2, #3
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4013      	ands	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001920:	2201      	movs	r2, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	091b      	lsrs	r3, r3, #4
 8001936:	f003 0201 	and.w	r2, r3, #1
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	2b03      	cmp	r3, #3
 8001956:	d017      	beq.n	8001988 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	2203      	movs	r2, #3
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d123      	bne.n	80019dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	08da      	lsrs	r2, r3, #3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3208      	adds	r2, #8
 800199c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	220f      	movs	r2, #15
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	691a      	ldr	r2, [r3, #16]
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	08da      	lsrs	r2, r3, #3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3208      	adds	r2, #8
 80019d6:	69b9      	ldr	r1, [r7, #24]
 80019d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	2203      	movs	r2, #3
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0203 	and.w	r2, r3, #3
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 80b4 	beq.w	8001b86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	4b60      	ldr	r3, [pc, #384]	; (8001ba4 <HAL_GPIO_Init+0x30c>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	4a5f      	ldr	r2, [pc, #380]	; (8001ba4 <HAL_GPIO_Init+0x30c>)
 8001a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2e:	4b5d      	ldr	r3, [pc, #372]	; (8001ba4 <HAL_GPIO_Init+0x30c>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a3a:	4a5b      	ldr	r2, [pc, #364]	; (8001ba8 <HAL_GPIO_Init+0x310>)
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	089b      	lsrs	r3, r3, #2
 8001a40:	3302      	adds	r3, #2
 8001a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	220f      	movs	r2, #15
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a52      	ldr	r2, [pc, #328]	; (8001bac <HAL_GPIO_Init+0x314>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d02b      	beq.n	8001abe <HAL_GPIO_Init+0x226>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a51      	ldr	r2, [pc, #324]	; (8001bb0 <HAL_GPIO_Init+0x318>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d025      	beq.n	8001aba <HAL_GPIO_Init+0x222>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a50      	ldr	r2, [pc, #320]	; (8001bb4 <HAL_GPIO_Init+0x31c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d01f      	beq.n	8001ab6 <HAL_GPIO_Init+0x21e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a4f      	ldr	r2, [pc, #316]	; (8001bb8 <HAL_GPIO_Init+0x320>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d019      	beq.n	8001ab2 <HAL_GPIO_Init+0x21a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a4e      	ldr	r2, [pc, #312]	; (8001bbc <HAL_GPIO_Init+0x324>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d013      	beq.n	8001aae <HAL_GPIO_Init+0x216>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a4d      	ldr	r2, [pc, #308]	; (8001bc0 <HAL_GPIO_Init+0x328>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d00d      	beq.n	8001aaa <HAL_GPIO_Init+0x212>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a4c      	ldr	r2, [pc, #304]	; (8001bc4 <HAL_GPIO_Init+0x32c>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d007      	beq.n	8001aa6 <HAL_GPIO_Init+0x20e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a4b      	ldr	r2, [pc, #300]	; (8001bc8 <HAL_GPIO_Init+0x330>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d101      	bne.n	8001aa2 <HAL_GPIO_Init+0x20a>
 8001a9e:	2307      	movs	r3, #7
 8001aa0:	e00e      	b.n	8001ac0 <HAL_GPIO_Init+0x228>
 8001aa2:	2308      	movs	r3, #8
 8001aa4:	e00c      	b.n	8001ac0 <HAL_GPIO_Init+0x228>
 8001aa6:	2306      	movs	r3, #6
 8001aa8:	e00a      	b.n	8001ac0 <HAL_GPIO_Init+0x228>
 8001aaa:	2305      	movs	r3, #5
 8001aac:	e008      	b.n	8001ac0 <HAL_GPIO_Init+0x228>
 8001aae:	2304      	movs	r3, #4
 8001ab0:	e006      	b.n	8001ac0 <HAL_GPIO_Init+0x228>
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e004      	b.n	8001ac0 <HAL_GPIO_Init+0x228>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e002      	b.n	8001ac0 <HAL_GPIO_Init+0x228>
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <HAL_GPIO_Init+0x228>
 8001abe:	2300      	movs	r3, #0
 8001ac0:	69fa      	ldr	r2, [r7, #28]
 8001ac2:	f002 0203 	and.w	r2, r2, #3
 8001ac6:	0092      	lsls	r2, r2, #2
 8001ac8:	4093      	lsls	r3, r2
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ad0:	4935      	ldr	r1, [pc, #212]	; (8001ba8 <HAL_GPIO_Init+0x310>)
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	089b      	lsrs	r3, r3, #2
 8001ad6:	3302      	adds	r3, #2
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ade:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <HAL_GPIO_Init+0x334>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b02:	4a32      	ldr	r2, [pc, #200]	; (8001bcc <HAL_GPIO_Init+0x334>)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b08:	4b30      	ldr	r3, [pc, #192]	; (8001bcc <HAL_GPIO_Init+0x334>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b2c:	4a27      	ldr	r2, [pc, #156]	; (8001bcc <HAL_GPIO_Init+0x334>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b32:	4b26      	ldr	r3, [pc, #152]	; (8001bcc <HAL_GPIO_Init+0x334>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b56:	4a1d      	ldr	r2, [pc, #116]	; (8001bcc <HAL_GPIO_Init+0x334>)
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <HAL_GPIO_Init+0x334>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b80:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <HAL_GPIO_Init+0x334>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	61fb      	str	r3, [r7, #28]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	2b0f      	cmp	r3, #15
 8001b90:	f67f ae90 	bls.w	80018b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	3724      	adds	r7, #36	; 0x24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40013800 	.word	0x40013800
 8001bac:	40020000 	.word	0x40020000
 8001bb0:	40020400 	.word	0x40020400
 8001bb4:	40020800 	.word	0x40020800
 8001bb8:	40020c00 	.word	0x40020c00
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40021400 	.word	0x40021400
 8001bc4:	40021800 	.word	0x40021800
 8001bc8:	40021c00 	.word	0x40021c00
 8001bcc:	40013c00 	.word	0x40013c00

08001bd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691a      	ldr	r2, [r3, #16]
 8001be0:	887b      	ldrh	r3, [r7, #2]
 8001be2:	4013      	ands	r3, r2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d002      	beq.n	8001bee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001be8:	2301      	movs	r3, #1
 8001bea:	73fb      	strb	r3, [r7, #15]
 8001bec:	e001      	b.n	8001bf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	807b      	strh	r3, [r7, #2]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c10:	787b      	ldrb	r3, [r7, #1]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c16:	887a      	ldrh	r2, [r7, #2]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c1c:	e003      	b.n	8001c26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c1e:	887b      	ldrh	r3, [r7, #2]
 8001c20:	041a      	lsls	r2, r3, #16
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	619a      	str	r2, [r3, #24]
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e267      	b.n	8002116 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d075      	beq.n	8001d3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c52:	4b88      	ldr	r3, [pc, #544]	; (8001e74 <HAL_RCC_OscConfig+0x240>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d00c      	beq.n	8001c78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c5e:	4b85      	ldr	r3, [pc, #532]	; (8001e74 <HAL_RCC_OscConfig+0x240>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c66:	2b08      	cmp	r3, #8
 8001c68:	d112      	bne.n	8001c90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c6a:	4b82      	ldr	r3, [pc, #520]	; (8001e74 <HAL_RCC_OscConfig+0x240>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c76:	d10b      	bne.n	8001c90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c78:	4b7e      	ldr	r3, [pc, #504]	; (8001e74 <HAL_RCC_OscConfig+0x240>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d05b      	beq.n	8001d3c <HAL_RCC_OscConfig+0x108>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d157      	bne.n	8001d3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e242      	b.n	8002116 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c98:	d106      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x74>
 8001c9a:	4b76      	ldr	r3, [pc, #472]	; (8001e74 <HAL_RCC_OscConfig+0x240>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a75      	ldr	r2, [pc, #468]	; (8001e74 <HAL_RCC_OscConfig+0x240>)
 8001ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	e01d      	b.n	8001ce4 <HAL_RCC_OscConfig+0xb0>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb0:	d10c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x98>
 8001cb2:	4b70      	ldr	r3, [pc, #448]	; (8001e74 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a6f      	ldr	r2, [pc, #444]	; (8001e74 <HAL_RCC_OscConfig+0x240>)
 8001cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	4b6d      	ldr	r3, [pc, #436]	; (8001e74 <HAL_RCC_OscConfig+0x240>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a6c      	ldr	r2, [pc, #432]	; (8001e74 <HAL_RCC_OscConfig+0x240>)
 8001cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	e00b      	b.n	8001ce4 <HAL_RCC_OscConfig+0xb0>
 8001ccc:	4b69      	ldr	r3, [pc, #420]	; (8001e74 <HAL_RCC_OscConfig+0x240>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a68      	ldr	r2, [pc, #416]	; (8001e74 <HAL_RCC_OscConfig+0x240>)
 8001cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	4b66      	ldr	r3, [pc, #408]	; (8001e74 <HAL_RCC_OscConfig+0x240>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a65      	ldr	r2, [pc, #404]	; (8001e74 <HAL_RCC_OscConfig+0x240>)
 8001cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d013      	beq.n	8001d14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7ff f916 	bl	8000f1c <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cf4:	f7ff f912 	bl	8000f1c <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b64      	cmp	r3, #100	; 0x64
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e207      	b.n	8002116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d06:	4b5b      	ldr	r3, [pc, #364]	; (8001e74 <HAL_RCC_OscConfig+0x240>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0xc0>
 8001d12:	e014      	b.n	8001d3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d14:	f7ff f902 	bl	8000f1c <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d1c:	f7ff f8fe 	bl	8000f1c <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b64      	cmp	r3, #100	; 0x64
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e1f3      	b.n	8002116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2e:	4b51      	ldr	r3, [pc, #324]	; (8001e74 <HAL_RCC_OscConfig+0x240>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0xe8>
 8001d3a:	e000      	b.n	8001d3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d063      	beq.n	8001e12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d4a:	4b4a      	ldr	r3, [pc, #296]	; (8001e74 <HAL_RCC_OscConfig+0x240>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00b      	beq.n	8001d6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d56:	4b47      	ldr	r3, [pc, #284]	; (8001e74 <HAL_RCC_OscConfig+0x240>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d5e:	2b08      	cmp	r3, #8
 8001d60:	d11c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d62:	4b44      	ldr	r3, [pc, #272]	; (8001e74 <HAL_RCC_OscConfig+0x240>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d116      	bne.n	8001d9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6e:	4b41      	ldr	r3, [pc, #260]	; (8001e74 <HAL_RCC_OscConfig+0x240>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d005      	beq.n	8001d86 <HAL_RCC_OscConfig+0x152>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d001      	beq.n	8001d86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e1c7      	b.n	8002116 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d86:	4b3b      	ldr	r3, [pc, #236]	; (8001e74 <HAL_RCC_OscConfig+0x240>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4937      	ldr	r1, [pc, #220]	; (8001e74 <HAL_RCC_OscConfig+0x240>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d9a:	e03a      	b.n	8001e12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d020      	beq.n	8001de6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001da4:	4b34      	ldr	r3, [pc, #208]	; (8001e78 <HAL_RCC_OscConfig+0x244>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001daa:	f7ff f8b7 	bl	8000f1c <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001db2:	f7ff f8b3 	bl	8000f1c <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e1a8      	b.n	8002116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc4:	4b2b      	ldr	r3, [pc, #172]	; (8001e74 <HAL_RCC_OscConfig+0x240>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f0      	beq.n	8001db2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd0:	4b28      	ldr	r3, [pc, #160]	; (8001e74 <HAL_RCC_OscConfig+0x240>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4925      	ldr	r1, [pc, #148]	; (8001e74 <HAL_RCC_OscConfig+0x240>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	600b      	str	r3, [r1, #0]
 8001de4:	e015      	b.n	8001e12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001de6:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <HAL_RCC_OscConfig+0x244>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dec:	f7ff f896 	bl	8000f1c <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001df4:	f7ff f892 	bl	8000f1c <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e187      	b.n	8002116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e06:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <HAL_RCC_OscConfig+0x240>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f0      	bne.n	8001df4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d036      	beq.n	8001e8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d016      	beq.n	8001e54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e26:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <HAL_RCC_OscConfig+0x248>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2c:	f7ff f876 	bl	8000f1c <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e34:	f7ff f872 	bl	8000f1c <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e167      	b.n	8002116 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e46:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <HAL_RCC_OscConfig+0x240>)
 8001e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0x200>
 8001e52:	e01b      	b.n	8001e8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e54:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_RCC_OscConfig+0x248>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5a:	f7ff f85f 	bl	8000f1c <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e60:	e00e      	b.n	8001e80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e62:	f7ff f85b 	bl	8000f1c <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d907      	bls.n	8001e80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e150      	b.n	8002116 <HAL_RCC_OscConfig+0x4e2>
 8001e74:	40023800 	.word	0x40023800
 8001e78:	42470000 	.word	0x42470000
 8001e7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e80:	4b88      	ldr	r3, [pc, #544]	; (80020a4 <HAL_RCC_OscConfig+0x470>)
 8001e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1ea      	bne.n	8001e62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 8097 	beq.w	8001fc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e9e:	4b81      	ldr	r3, [pc, #516]	; (80020a4 <HAL_RCC_OscConfig+0x470>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10f      	bne.n	8001eca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	4b7d      	ldr	r3, [pc, #500]	; (80020a4 <HAL_RCC_OscConfig+0x470>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	4a7c      	ldr	r2, [pc, #496]	; (80020a4 <HAL_RCC_OscConfig+0x470>)
 8001eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eba:	4b7a      	ldr	r3, [pc, #488]	; (80020a4 <HAL_RCC_OscConfig+0x470>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eca:	4b77      	ldr	r3, [pc, #476]	; (80020a8 <HAL_RCC_OscConfig+0x474>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d118      	bne.n	8001f08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ed6:	4b74      	ldr	r3, [pc, #464]	; (80020a8 <HAL_RCC_OscConfig+0x474>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a73      	ldr	r2, [pc, #460]	; (80020a8 <HAL_RCC_OscConfig+0x474>)
 8001edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ee2:	f7ff f81b 	bl	8000f1c <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eea:	f7ff f817 	bl	8000f1c <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e10c      	b.n	8002116 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efc:	4b6a      	ldr	r3, [pc, #424]	; (80020a8 <HAL_RCC_OscConfig+0x474>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0f0      	beq.n	8001eea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d106      	bne.n	8001f1e <HAL_RCC_OscConfig+0x2ea>
 8001f10:	4b64      	ldr	r3, [pc, #400]	; (80020a4 <HAL_RCC_OscConfig+0x470>)
 8001f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f14:	4a63      	ldr	r2, [pc, #396]	; (80020a4 <HAL_RCC_OscConfig+0x470>)
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f1c:	e01c      	b.n	8001f58 <HAL_RCC_OscConfig+0x324>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b05      	cmp	r3, #5
 8001f24:	d10c      	bne.n	8001f40 <HAL_RCC_OscConfig+0x30c>
 8001f26:	4b5f      	ldr	r3, [pc, #380]	; (80020a4 <HAL_RCC_OscConfig+0x470>)
 8001f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2a:	4a5e      	ldr	r2, [pc, #376]	; (80020a4 <HAL_RCC_OscConfig+0x470>)
 8001f2c:	f043 0304 	orr.w	r3, r3, #4
 8001f30:	6713      	str	r3, [r2, #112]	; 0x70
 8001f32:	4b5c      	ldr	r3, [pc, #368]	; (80020a4 <HAL_RCC_OscConfig+0x470>)
 8001f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f36:	4a5b      	ldr	r2, [pc, #364]	; (80020a4 <HAL_RCC_OscConfig+0x470>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f3e:	e00b      	b.n	8001f58 <HAL_RCC_OscConfig+0x324>
 8001f40:	4b58      	ldr	r3, [pc, #352]	; (80020a4 <HAL_RCC_OscConfig+0x470>)
 8001f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f44:	4a57      	ldr	r2, [pc, #348]	; (80020a4 <HAL_RCC_OscConfig+0x470>)
 8001f46:	f023 0301 	bic.w	r3, r3, #1
 8001f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f4c:	4b55      	ldr	r3, [pc, #340]	; (80020a4 <HAL_RCC_OscConfig+0x470>)
 8001f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f50:	4a54      	ldr	r2, [pc, #336]	; (80020a4 <HAL_RCC_OscConfig+0x470>)
 8001f52:	f023 0304 	bic.w	r3, r3, #4
 8001f56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d015      	beq.n	8001f8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f60:	f7fe ffdc 	bl	8000f1c <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f66:	e00a      	b.n	8001f7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f68:	f7fe ffd8 	bl	8000f1c <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e0cb      	b.n	8002116 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7e:	4b49      	ldr	r3, [pc, #292]	; (80020a4 <HAL_RCC_OscConfig+0x470>)
 8001f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0ee      	beq.n	8001f68 <HAL_RCC_OscConfig+0x334>
 8001f8a:	e014      	b.n	8001fb6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8c:	f7fe ffc6 	bl	8000f1c <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f92:	e00a      	b.n	8001faa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f94:	f7fe ffc2 	bl	8000f1c <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e0b5      	b.n	8002116 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001faa:	4b3e      	ldr	r3, [pc, #248]	; (80020a4 <HAL_RCC_OscConfig+0x470>)
 8001fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1ee      	bne.n	8001f94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fb6:	7dfb      	ldrb	r3, [r7, #23]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d105      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fbc:	4b39      	ldr	r3, [pc, #228]	; (80020a4 <HAL_RCC_OscConfig+0x470>)
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	4a38      	ldr	r2, [pc, #224]	; (80020a4 <HAL_RCC_OscConfig+0x470>)
 8001fc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 80a1 	beq.w	8002114 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fd2:	4b34      	ldr	r3, [pc, #208]	; (80020a4 <HAL_RCC_OscConfig+0x470>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 030c 	and.w	r3, r3, #12
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	d05c      	beq.n	8002098 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d141      	bne.n	800206a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe6:	4b31      	ldr	r3, [pc, #196]	; (80020ac <HAL_RCC_OscConfig+0x478>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fec:	f7fe ff96 	bl	8000f1c <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff4:	f7fe ff92 	bl	8000f1c <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e087      	b.n	8002116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002006:	4b27      	ldr	r3, [pc, #156]	; (80020a4 <HAL_RCC_OscConfig+0x470>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69da      	ldr	r2, [r3, #28]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	431a      	orrs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	019b      	lsls	r3, r3, #6
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002028:	085b      	lsrs	r3, r3, #1
 800202a:	3b01      	subs	r3, #1
 800202c:	041b      	lsls	r3, r3, #16
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002034:	061b      	lsls	r3, r3, #24
 8002036:	491b      	ldr	r1, [pc, #108]	; (80020a4 <HAL_RCC_OscConfig+0x470>)
 8002038:	4313      	orrs	r3, r2
 800203a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800203c:	4b1b      	ldr	r3, [pc, #108]	; (80020ac <HAL_RCC_OscConfig+0x478>)
 800203e:	2201      	movs	r2, #1
 8002040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002042:	f7fe ff6b 	bl	8000f1c <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800204a:	f7fe ff67 	bl	8000f1c <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e05c      	b.n	8002116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205c:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <HAL_RCC_OscConfig+0x470>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0f0      	beq.n	800204a <HAL_RCC_OscConfig+0x416>
 8002068:	e054      	b.n	8002114 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206a:	4b10      	ldr	r3, [pc, #64]	; (80020ac <HAL_RCC_OscConfig+0x478>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7fe ff54 	bl	8000f1c <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002078:	f7fe ff50 	bl	8000f1c <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e045      	b.n	8002116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <HAL_RCC_OscConfig+0x470>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x444>
 8002096:	e03d      	b.n	8002114 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d107      	bne.n	80020b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e038      	b.n	8002116 <HAL_RCC_OscConfig+0x4e2>
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40007000 	.word	0x40007000
 80020ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020b0:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <HAL_RCC_OscConfig+0x4ec>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d028      	beq.n	8002110 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d121      	bne.n	8002110 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d11a      	bne.n	8002110 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020e0:	4013      	ands	r3, r2
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d111      	bne.n	8002110 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f6:	085b      	lsrs	r3, r3, #1
 80020f8:	3b01      	subs	r3, #1
 80020fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d107      	bne.n	8002110 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800210c:	429a      	cmp	r2, r3
 800210e:	d001      	beq.n	8002114 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e000      	b.n	8002116 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800

08002124 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0cc      	b.n	80022d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002138:	4b68      	ldr	r3, [pc, #416]	; (80022dc <HAL_RCC_ClockConfig+0x1b8>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d90c      	bls.n	8002160 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002146:	4b65      	ldr	r3, [pc, #404]	; (80022dc <HAL_RCC_ClockConfig+0x1b8>)
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800214e:	4b63      	ldr	r3, [pc, #396]	; (80022dc <HAL_RCC_ClockConfig+0x1b8>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	429a      	cmp	r2, r3
 800215a:	d001      	beq.n	8002160 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e0b8      	b.n	80022d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d020      	beq.n	80021ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002178:	4b59      	ldr	r3, [pc, #356]	; (80022e0 <HAL_RCC_ClockConfig+0x1bc>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	4a58      	ldr	r2, [pc, #352]	; (80022e0 <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002182:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	2b00      	cmp	r3, #0
 800218e:	d005      	beq.n	800219c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002190:	4b53      	ldr	r3, [pc, #332]	; (80022e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	4a52      	ldr	r2, [pc, #328]	; (80022e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800219a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800219c:	4b50      	ldr	r3, [pc, #320]	; (80022e0 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	494d      	ldr	r1, [pc, #308]	; (80022e0 <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d044      	beq.n	8002244 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d107      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c2:	4b47      	ldr	r3, [pc, #284]	; (80022e0 <HAL_RCC_ClockConfig+0x1bc>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d119      	bne.n	8002202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e07f      	b.n	80022d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d003      	beq.n	80021e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021de:	2b03      	cmp	r3, #3
 80021e0:	d107      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e2:	4b3f      	ldr	r3, [pc, #252]	; (80022e0 <HAL_RCC_ClockConfig+0x1bc>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d109      	bne.n	8002202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e06f      	b.n	80022d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f2:	4b3b      	ldr	r3, [pc, #236]	; (80022e0 <HAL_RCC_ClockConfig+0x1bc>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e067      	b.n	80022d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002202:	4b37      	ldr	r3, [pc, #220]	; (80022e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f023 0203 	bic.w	r2, r3, #3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	4934      	ldr	r1, [pc, #208]	; (80022e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002210:	4313      	orrs	r3, r2
 8002212:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002214:	f7fe fe82 	bl	8000f1c <HAL_GetTick>
 8002218:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221a:	e00a      	b.n	8002232 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800221c:	f7fe fe7e 	bl	8000f1c <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	f241 3288 	movw	r2, #5000	; 0x1388
 800222a:	4293      	cmp	r3, r2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e04f      	b.n	80022d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002232:	4b2b      	ldr	r3, [pc, #172]	; (80022e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 020c 	and.w	r2, r3, #12
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	429a      	cmp	r2, r3
 8002242:	d1eb      	bne.n	800221c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002244:	4b25      	ldr	r3, [pc, #148]	; (80022dc <HAL_RCC_ClockConfig+0x1b8>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d20c      	bcs.n	800226c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002252:	4b22      	ldr	r3, [pc, #136]	; (80022dc <HAL_RCC_ClockConfig+0x1b8>)
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800225a:	4b20      	ldr	r3, [pc, #128]	; (80022dc <HAL_RCC_ClockConfig+0x1b8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	429a      	cmp	r2, r3
 8002266:	d001      	beq.n	800226c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e032      	b.n	80022d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	d008      	beq.n	800228a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002278:	4b19      	ldr	r3, [pc, #100]	; (80022e0 <HAL_RCC_ClockConfig+0x1bc>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	4916      	ldr	r1, [pc, #88]	; (80022e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	4313      	orrs	r3, r2
 8002288:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	2b00      	cmp	r3, #0
 8002294:	d009      	beq.n	80022aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002296:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	490e      	ldr	r1, [pc, #56]	; (80022e0 <HAL_RCC_ClockConfig+0x1bc>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022aa:	f000 f821 	bl	80022f0 <HAL_RCC_GetSysClockFreq>
 80022ae:	4602      	mov	r2, r0
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <HAL_RCC_ClockConfig+0x1bc>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	091b      	lsrs	r3, r3, #4
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	490a      	ldr	r1, [pc, #40]	; (80022e4 <HAL_RCC_ClockConfig+0x1c0>)
 80022bc:	5ccb      	ldrb	r3, [r1, r3]
 80022be:	fa22 f303 	lsr.w	r3, r2, r3
 80022c2:	4a09      	ldr	r2, [pc, #36]	; (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022c6:	4b09      	ldr	r3, [pc, #36]	; (80022ec <HAL_RCC_ClockConfig+0x1c8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe fde2 	bl	8000e94 <HAL_InitTick>

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40023c00 	.word	0x40023c00
 80022e0:	40023800 	.word	0x40023800
 80022e4:	08002ed8 	.word	0x08002ed8
 80022e8:	20000000 	.word	0x20000000
 80022ec:	20000004 	.word	0x20000004

080022f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022f4:	b094      	sub	sp, #80	; 0x50
 80022f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	647b      	str	r3, [r7, #68]	; 0x44
 80022fc:	2300      	movs	r3, #0
 80022fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002300:	2300      	movs	r3, #0
 8002302:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002308:	4b79      	ldr	r3, [pc, #484]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 030c 	and.w	r3, r3, #12
 8002310:	2b08      	cmp	r3, #8
 8002312:	d00d      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0x40>
 8002314:	2b08      	cmp	r3, #8
 8002316:	f200 80e1 	bhi.w	80024dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800231a:	2b00      	cmp	r3, #0
 800231c:	d002      	beq.n	8002324 <HAL_RCC_GetSysClockFreq+0x34>
 800231e:	2b04      	cmp	r3, #4
 8002320:	d003      	beq.n	800232a <HAL_RCC_GetSysClockFreq+0x3a>
 8002322:	e0db      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002324:	4b73      	ldr	r3, [pc, #460]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002326:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002328:	e0db      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800232a:	4b73      	ldr	r3, [pc, #460]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800232c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800232e:	e0d8      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002330:	4b6f      	ldr	r3, [pc, #444]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002338:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800233a:	4b6d      	ldr	r3, [pc, #436]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d063      	beq.n	800240e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002346:	4b6a      	ldr	r3, [pc, #424]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	099b      	lsrs	r3, r3, #6
 800234c:	2200      	movs	r2, #0
 800234e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002350:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002358:	633b      	str	r3, [r7, #48]	; 0x30
 800235a:	2300      	movs	r3, #0
 800235c:	637b      	str	r3, [r7, #52]	; 0x34
 800235e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002362:	4622      	mov	r2, r4
 8002364:	462b      	mov	r3, r5
 8002366:	f04f 0000 	mov.w	r0, #0
 800236a:	f04f 0100 	mov.w	r1, #0
 800236e:	0159      	lsls	r1, r3, #5
 8002370:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002374:	0150      	lsls	r0, r2, #5
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4621      	mov	r1, r4
 800237c:	1a51      	subs	r1, r2, r1
 800237e:	6139      	str	r1, [r7, #16]
 8002380:	4629      	mov	r1, r5
 8002382:	eb63 0301 	sbc.w	r3, r3, r1
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002394:	4659      	mov	r1, fp
 8002396:	018b      	lsls	r3, r1, #6
 8002398:	4651      	mov	r1, sl
 800239a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800239e:	4651      	mov	r1, sl
 80023a0:	018a      	lsls	r2, r1, #6
 80023a2:	4651      	mov	r1, sl
 80023a4:	ebb2 0801 	subs.w	r8, r2, r1
 80023a8:	4659      	mov	r1, fp
 80023aa:	eb63 0901 	sbc.w	r9, r3, r1
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023c2:	4690      	mov	r8, r2
 80023c4:	4699      	mov	r9, r3
 80023c6:	4623      	mov	r3, r4
 80023c8:	eb18 0303 	adds.w	r3, r8, r3
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	462b      	mov	r3, r5
 80023d0:	eb49 0303 	adc.w	r3, r9, r3
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	f04f 0300 	mov.w	r3, #0
 80023de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023e2:	4629      	mov	r1, r5
 80023e4:	024b      	lsls	r3, r1, #9
 80023e6:	4621      	mov	r1, r4
 80023e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023ec:	4621      	mov	r1, r4
 80023ee:	024a      	lsls	r2, r1, #9
 80023f0:	4610      	mov	r0, r2
 80023f2:	4619      	mov	r1, r3
 80023f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023f6:	2200      	movs	r2, #0
 80023f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80023fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002400:	f7fd fee2 	bl	80001c8 <__aeabi_uldivmod>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4613      	mov	r3, r2
 800240a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800240c:	e058      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800240e:	4b38      	ldr	r3, [pc, #224]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	099b      	lsrs	r3, r3, #6
 8002414:	2200      	movs	r2, #0
 8002416:	4618      	mov	r0, r3
 8002418:	4611      	mov	r1, r2
 800241a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800241e:	623b      	str	r3, [r7, #32]
 8002420:	2300      	movs	r3, #0
 8002422:	627b      	str	r3, [r7, #36]	; 0x24
 8002424:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002428:	4642      	mov	r2, r8
 800242a:	464b      	mov	r3, r9
 800242c:	f04f 0000 	mov.w	r0, #0
 8002430:	f04f 0100 	mov.w	r1, #0
 8002434:	0159      	lsls	r1, r3, #5
 8002436:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800243a:	0150      	lsls	r0, r2, #5
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4641      	mov	r1, r8
 8002442:	ebb2 0a01 	subs.w	sl, r2, r1
 8002446:	4649      	mov	r1, r9
 8002448:	eb63 0b01 	sbc.w	fp, r3, r1
 800244c:	f04f 0200 	mov.w	r2, #0
 8002450:	f04f 0300 	mov.w	r3, #0
 8002454:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002458:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800245c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002460:	ebb2 040a 	subs.w	r4, r2, sl
 8002464:	eb63 050b 	sbc.w	r5, r3, fp
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	00eb      	lsls	r3, r5, #3
 8002472:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002476:	00e2      	lsls	r2, r4, #3
 8002478:	4614      	mov	r4, r2
 800247a:	461d      	mov	r5, r3
 800247c:	4643      	mov	r3, r8
 800247e:	18e3      	adds	r3, r4, r3
 8002480:	603b      	str	r3, [r7, #0]
 8002482:	464b      	mov	r3, r9
 8002484:	eb45 0303 	adc.w	r3, r5, r3
 8002488:	607b      	str	r3, [r7, #4]
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002496:	4629      	mov	r1, r5
 8002498:	028b      	lsls	r3, r1, #10
 800249a:	4621      	mov	r1, r4
 800249c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024a0:	4621      	mov	r1, r4
 80024a2:	028a      	lsls	r2, r1, #10
 80024a4:	4610      	mov	r0, r2
 80024a6:	4619      	mov	r1, r3
 80024a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024aa:	2200      	movs	r2, #0
 80024ac:	61bb      	str	r3, [r7, #24]
 80024ae:	61fa      	str	r2, [r7, #28]
 80024b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024b4:	f7fd fe88 	bl	80001c8 <__aeabi_uldivmod>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4613      	mov	r3, r2
 80024be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	0c1b      	lsrs	r3, r3, #16
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	3301      	adds	r3, #1
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80024d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024da:	e002      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024dc:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80024de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3750      	adds	r7, #80	; 0x50
 80024e8:	46bd      	mov	sp, r7
 80024ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024ee:	bf00      	nop
 80024f0:	40023800 	.word	0x40023800
 80024f4:	00f42400 	.word	0x00f42400
 80024f8:	007a1200 	.word	0x007a1200

080024fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002500:	4b03      	ldr	r3, [pc, #12]	; (8002510 <HAL_RCC_GetHCLKFreq+0x14>)
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	4618      	mov	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000000 	.word	0x20000000

08002514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002518:	f7ff fff0 	bl	80024fc <HAL_RCC_GetHCLKFreq>
 800251c:	4602      	mov	r2, r0
 800251e:	4b05      	ldr	r3, [pc, #20]	; (8002534 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	0a9b      	lsrs	r3, r3, #10
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	4903      	ldr	r1, [pc, #12]	; (8002538 <HAL_RCC_GetPCLK1Freq+0x24>)
 800252a:	5ccb      	ldrb	r3, [r1, r3]
 800252c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002530:	4618      	mov	r0, r3
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40023800 	.word	0x40023800
 8002538:	08002ee8 	.word	0x08002ee8

0800253c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002540:	f7ff ffdc 	bl	80024fc <HAL_RCC_GetHCLKFreq>
 8002544:	4602      	mov	r2, r0
 8002546:	4b05      	ldr	r3, [pc, #20]	; (800255c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	0b5b      	lsrs	r3, r3, #13
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	4903      	ldr	r1, [pc, #12]	; (8002560 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002552:	5ccb      	ldrb	r3, [r1, r3]
 8002554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002558:	4618      	mov	r0, r3
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40023800 	.word	0x40023800
 8002560:	08002ee8 	.word	0x08002ee8

08002564 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e03f      	b.n	80025f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7fe fb92 	bl	8000cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2224      	movs	r2, #36	; 0x24
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f9e9 	bl	8002980 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b08a      	sub	sp, #40	; 0x28
 8002602:	af02      	add	r7, sp, #8
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	603b      	str	r3, [r7, #0]
 800260a:	4613      	mov	r3, r2
 800260c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b20      	cmp	r3, #32
 800261c:	d17c      	bne.n	8002718 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d002      	beq.n	800262a <HAL_UART_Transmit+0x2c>
 8002624:	88fb      	ldrh	r3, [r7, #6]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e075      	b.n	800271a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_UART_Transmit+0x3e>
 8002638:	2302      	movs	r3, #2
 800263a:	e06e      	b.n	800271a <HAL_UART_Transmit+0x11c>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2221      	movs	r2, #33	; 0x21
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002652:	f7fe fc63 	bl	8000f1c <HAL_GetTick>
 8002656:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	88fa      	ldrh	r2, [r7, #6]
 800265c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	88fa      	ldrh	r2, [r7, #6]
 8002662:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800266c:	d108      	bne.n	8002680 <HAL_UART_Transmit+0x82>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d104      	bne.n	8002680 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	61bb      	str	r3, [r7, #24]
 800267e:	e003      	b.n	8002688 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002684:	2300      	movs	r3, #0
 8002686:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002690:	e02a      	b.n	80026e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	2200      	movs	r2, #0
 800269a:	2180      	movs	r1, #128	; 0x80
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 f900 	bl	80028a2 <UART_WaitOnFlagUntilTimeout>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e036      	b.n	800271a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10b      	bne.n	80026ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	3302      	adds	r3, #2
 80026c6:	61bb      	str	r3, [r7, #24]
 80026c8:	e007      	b.n	80026da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	781a      	ldrb	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	3301      	adds	r3, #1
 80026d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026de:	b29b      	uxth	r3, r3
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1cf      	bne.n	8002692 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2200      	movs	r2, #0
 80026fa:	2140      	movs	r1, #64	; 0x40
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 f8d0 	bl	80028a2 <UART_WaitOnFlagUntilTimeout>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e006      	b.n	800271a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	e000      	b.n	800271a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002718:	2302      	movs	r3, #2
  }
}
 800271a:	4618      	mov	r0, r3
 800271c:	3720      	adds	r7, #32
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b08a      	sub	sp, #40	; 0x28
 8002726:	af02      	add	r7, sp, #8
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	603b      	str	r3, [r7, #0]
 800272e:	4613      	mov	r3, r2
 8002730:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b20      	cmp	r3, #32
 8002740:	f040 808c 	bne.w	800285c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <HAL_UART_Receive+0x2e>
 800274a:	88fb      	ldrh	r3, [r7, #6]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e084      	b.n	800285e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <HAL_UART_Receive+0x40>
 800275e:	2302      	movs	r3, #2
 8002760:	e07d      	b.n	800285e <HAL_UART_Receive+0x13c>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2222      	movs	r2, #34	; 0x22
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800277e:	f7fe fbcd 	bl	8000f1c <HAL_GetTick>
 8002782:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	88fa      	ldrh	r2, [r7, #6]
 8002788:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	88fa      	ldrh	r2, [r7, #6]
 800278e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002798:	d108      	bne.n	80027ac <HAL_UART_Receive+0x8a>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d104      	bne.n	80027ac <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	61bb      	str	r3, [r7, #24]
 80027aa:	e003      	b.n	80027b4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80027bc:	e043      	b.n	8002846 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2200      	movs	r2, #0
 80027c6:	2120      	movs	r1, #32
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 f86a 	bl	80028a2 <UART_WaitOnFlagUntilTimeout>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e042      	b.n	800285e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10c      	bne.n	80027f8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	3302      	adds	r3, #2
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	e01f      	b.n	8002838 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002800:	d007      	beq.n	8002812 <HAL_UART_Receive+0xf0>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10a      	bne.n	8002820 <HAL_UART_Receive+0xfe>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	b2da      	uxtb	r2, r3
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	701a      	strb	r2, [r3, #0]
 800281e:	e008      	b.n	8002832 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	b2db      	uxtb	r3, r3
 8002828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800282c:	b2da      	uxtb	r2, r3
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3301      	adds	r3, #1
 8002836:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800283c:	b29b      	uxth	r3, r3
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800284a:	b29b      	uxth	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1b6      	bne.n	80027be <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2220      	movs	r2, #32
 8002854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002858:	2300      	movs	r3, #0
 800285a:	e000      	b.n	800285e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800285c:	2302      	movs	r3, #2
  }
}
 800285e:	4618      	mov	r0, r3
 8002860:	3720      	adds	r7, #32
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8002866:	b480      	push	{r7}
 8002868:	b085      	sub	sp, #20
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	2300      	movs	r3, #0
 8002874:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287c:	b2db      	uxtb	r3, r3
 800287e:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002886:	b2db      	uxtb	r3, r3
 8002888:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	b2da      	uxtb	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	4313      	orrs	r3, r2
 8002894:	b2db      	uxtb	r3, r3
}
 8002896:	4618      	mov	r0, r3
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b090      	sub	sp, #64	; 0x40
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	60f8      	str	r0, [r7, #12]
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	603b      	str	r3, [r7, #0]
 80028ae:	4613      	mov	r3, r2
 80028b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028b2:	e050      	b.n	8002956 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028ba:	d04c      	beq.n	8002956 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d007      	beq.n	80028d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80028c2:	f7fe fb2b 	bl	8000f1c <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d241      	bcs.n	8002956 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	330c      	adds	r3, #12
 80028d8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028dc:	e853 3f00 	ldrex	r3, [r3]
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80028e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	330c      	adds	r3, #12
 80028f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028f2:	637a      	str	r2, [r7, #52]	; 0x34
 80028f4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028fa:	e841 2300 	strex	r3, r2, [r1]
 80028fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1e5      	bne.n	80028d2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	3314      	adds	r3, #20
 800290c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	e853 3f00 	ldrex	r3, [r3]
 8002914:	613b      	str	r3, [r7, #16]
   return(result);
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	f023 0301 	bic.w	r3, r3, #1
 800291c:	63bb      	str	r3, [r7, #56]	; 0x38
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	3314      	adds	r3, #20
 8002924:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002926:	623a      	str	r2, [r7, #32]
 8002928:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800292a:	69f9      	ldr	r1, [r7, #28]
 800292c:	6a3a      	ldr	r2, [r7, #32]
 800292e:	e841 2300 	strex	r3, r2, [r1]
 8002932:	61bb      	str	r3, [r7, #24]
   return(result);
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1e5      	bne.n	8002906 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2220      	movs	r2, #32
 800293e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2220      	movs	r2, #32
 8002946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e00f      	b.n	8002976 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	4013      	ands	r3, r2
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	429a      	cmp	r2, r3
 8002964:	bf0c      	ite	eq
 8002966:	2301      	moveq	r3, #1
 8002968:	2300      	movne	r3, #0
 800296a:	b2db      	uxtb	r3, r3
 800296c:	461a      	mov	r2, r3
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	429a      	cmp	r2, r3
 8002972:	d09f      	beq.n	80028b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3740      	adds	r7, #64	; 0x40
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002984:	b0c0      	sub	sp, #256	; 0x100
 8002986:	af00      	add	r7, sp, #0
 8002988:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800298c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800299c:	68d9      	ldr	r1, [r3, #12]
 800299e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	ea40 0301 	orr.w	r3, r0, r1
 80029a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	431a      	orrs	r2, r3
 80029b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	431a      	orrs	r2, r3
 80029c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80029cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80029d8:	f021 010c 	bic.w	r1, r1, #12
 80029dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80029e6:	430b      	orrs	r3, r1
 80029e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80029f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029fa:	6999      	ldr	r1, [r3, #24]
 80029fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	ea40 0301 	orr.w	r3, r0, r1
 8002a06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	4b8f      	ldr	r3, [pc, #572]	; (8002c4c <UART_SetConfig+0x2cc>)
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d005      	beq.n	8002a20 <UART_SetConfig+0xa0>
 8002a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	4b8d      	ldr	r3, [pc, #564]	; (8002c50 <UART_SetConfig+0x2d0>)
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d104      	bne.n	8002a2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a20:	f7ff fd8c 	bl	800253c <HAL_RCC_GetPCLK2Freq>
 8002a24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002a28:	e003      	b.n	8002a32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a2a:	f7ff fd73 	bl	8002514 <HAL_RCC_GetPCLK1Freq>
 8002a2e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a3c:	f040 810c 	bne.w	8002c58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a44:	2200      	movs	r2, #0
 8002a46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a52:	4622      	mov	r2, r4
 8002a54:	462b      	mov	r3, r5
 8002a56:	1891      	adds	r1, r2, r2
 8002a58:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a5a:	415b      	adcs	r3, r3
 8002a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a62:	4621      	mov	r1, r4
 8002a64:	eb12 0801 	adds.w	r8, r2, r1
 8002a68:	4629      	mov	r1, r5
 8002a6a:	eb43 0901 	adc.w	r9, r3, r1
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a82:	4690      	mov	r8, r2
 8002a84:	4699      	mov	r9, r3
 8002a86:	4623      	mov	r3, r4
 8002a88:	eb18 0303 	adds.w	r3, r8, r3
 8002a8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a90:	462b      	mov	r3, r5
 8002a92:	eb49 0303 	adc.w	r3, r9, r3
 8002a96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002aa6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002aaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002aae:	460b      	mov	r3, r1
 8002ab0:	18db      	adds	r3, r3, r3
 8002ab2:	653b      	str	r3, [r7, #80]	; 0x50
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	eb42 0303 	adc.w	r3, r2, r3
 8002aba:	657b      	str	r3, [r7, #84]	; 0x54
 8002abc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ac0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ac4:	f7fd fb80 	bl	80001c8 <__aeabi_uldivmod>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4b61      	ldr	r3, [pc, #388]	; (8002c54 <UART_SetConfig+0x2d4>)
 8002ace:	fba3 2302 	umull	r2, r3, r3, r2
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	011c      	lsls	r4, r3, #4
 8002ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ada:	2200      	movs	r2, #0
 8002adc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ae0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ae4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ae8:	4642      	mov	r2, r8
 8002aea:	464b      	mov	r3, r9
 8002aec:	1891      	adds	r1, r2, r2
 8002aee:	64b9      	str	r1, [r7, #72]	; 0x48
 8002af0:	415b      	adcs	r3, r3
 8002af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002af4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002af8:	4641      	mov	r1, r8
 8002afa:	eb12 0a01 	adds.w	sl, r2, r1
 8002afe:	4649      	mov	r1, r9
 8002b00:	eb43 0b01 	adc.w	fp, r3, r1
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b18:	4692      	mov	sl, r2
 8002b1a:	469b      	mov	fp, r3
 8002b1c:	4643      	mov	r3, r8
 8002b1e:	eb1a 0303 	adds.w	r3, sl, r3
 8002b22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b26:	464b      	mov	r3, r9
 8002b28:	eb4b 0303 	adc.w	r3, fp, r3
 8002b2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b3c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b44:	460b      	mov	r3, r1
 8002b46:	18db      	adds	r3, r3, r3
 8002b48:	643b      	str	r3, [r7, #64]	; 0x40
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	eb42 0303 	adc.w	r3, r2, r3
 8002b50:	647b      	str	r3, [r7, #68]	; 0x44
 8002b52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002b5a:	f7fd fb35 	bl	80001c8 <__aeabi_uldivmod>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	4611      	mov	r1, r2
 8002b64:	4b3b      	ldr	r3, [pc, #236]	; (8002c54 <UART_SetConfig+0x2d4>)
 8002b66:	fba3 2301 	umull	r2, r3, r3, r1
 8002b6a:	095b      	lsrs	r3, r3, #5
 8002b6c:	2264      	movs	r2, #100	; 0x64
 8002b6e:	fb02 f303 	mul.w	r3, r2, r3
 8002b72:	1acb      	subs	r3, r1, r3
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b7a:	4b36      	ldr	r3, [pc, #216]	; (8002c54 <UART_SetConfig+0x2d4>)
 8002b7c:	fba3 2302 	umull	r2, r3, r3, r2
 8002b80:	095b      	lsrs	r3, r3, #5
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b88:	441c      	add	r4, r3
 8002b8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b94:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002b98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002b9c:	4642      	mov	r2, r8
 8002b9e:	464b      	mov	r3, r9
 8002ba0:	1891      	adds	r1, r2, r2
 8002ba2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ba4:	415b      	adcs	r3, r3
 8002ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ba8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002bac:	4641      	mov	r1, r8
 8002bae:	1851      	adds	r1, r2, r1
 8002bb0:	6339      	str	r1, [r7, #48]	; 0x30
 8002bb2:	4649      	mov	r1, r9
 8002bb4:	414b      	adcs	r3, r1
 8002bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	f04f 0300 	mov.w	r3, #0
 8002bc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002bc4:	4659      	mov	r1, fp
 8002bc6:	00cb      	lsls	r3, r1, #3
 8002bc8:	4651      	mov	r1, sl
 8002bca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bce:	4651      	mov	r1, sl
 8002bd0:	00ca      	lsls	r2, r1, #3
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	4642      	mov	r2, r8
 8002bda:	189b      	adds	r3, r3, r2
 8002bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002be0:	464b      	mov	r3, r9
 8002be2:	460a      	mov	r2, r1
 8002be4:	eb42 0303 	adc.w	r3, r2, r3
 8002be8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002bf8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002bfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002c00:	460b      	mov	r3, r1
 8002c02:	18db      	adds	r3, r3, r3
 8002c04:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c06:	4613      	mov	r3, r2
 8002c08:	eb42 0303 	adc.w	r3, r2, r3
 8002c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002c16:	f7fd fad7 	bl	80001c8 <__aeabi_uldivmod>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4b0d      	ldr	r3, [pc, #52]	; (8002c54 <UART_SetConfig+0x2d4>)
 8002c20:	fba3 1302 	umull	r1, r3, r3, r2
 8002c24:	095b      	lsrs	r3, r3, #5
 8002c26:	2164      	movs	r1, #100	; 0x64
 8002c28:	fb01 f303 	mul.w	r3, r1, r3
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	3332      	adds	r3, #50	; 0x32
 8002c32:	4a08      	ldr	r2, [pc, #32]	; (8002c54 <UART_SetConfig+0x2d4>)
 8002c34:	fba2 2303 	umull	r2, r3, r2, r3
 8002c38:	095b      	lsrs	r3, r3, #5
 8002c3a:	f003 0207 	and.w	r2, r3, #7
 8002c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4422      	add	r2, r4
 8002c46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c48:	e105      	b.n	8002e56 <UART_SetConfig+0x4d6>
 8002c4a:	bf00      	nop
 8002c4c:	40011000 	.word	0x40011000
 8002c50:	40011400 	.word	0x40011400
 8002c54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c62:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c6a:	4642      	mov	r2, r8
 8002c6c:	464b      	mov	r3, r9
 8002c6e:	1891      	adds	r1, r2, r2
 8002c70:	6239      	str	r1, [r7, #32]
 8002c72:	415b      	adcs	r3, r3
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
 8002c76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c7a:	4641      	mov	r1, r8
 8002c7c:	1854      	adds	r4, r2, r1
 8002c7e:	4649      	mov	r1, r9
 8002c80:	eb43 0501 	adc.w	r5, r3, r1
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	f04f 0300 	mov.w	r3, #0
 8002c8c:	00eb      	lsls	r3, r5, #3
 8002c8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c92:	00e2      	lsls	r2, r4, #3
 8002c94:	4614      	mov	r4, r2
 8002c96:	461d      	mov	r5, r3
 8002c98:	4643      	mov	r3, r8
 8002c9a:	18e3      	adds	r3, r4, r3
 8002c9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ca0:	464b      	mov	r3, r9
 8002ca2:	eb45 0303 	adc.w	r3, r5, r3
 8002ca6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002cb6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002cc6:	4629      	mov	r1, r5
 8002cc8:	008b      	lsls	r3, r1, #2
 8002cca:	4621      	mov	r1, r4
 8002ccc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cd0:	4621      	mov	r1, r4
 8002cd2:	008a      	lsls	r2, r1, #2
 8002cd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002cd8:	f7fd fa76 	bl	80001c8 <__aeabi_uldivmod>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4b60      	ldr	r3, [pc, #384]	; (8002e64 <UART_SetConfig+0x4e4>)
 8002ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	011c      	lsls	r4, r3, #4
 8002cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002cf4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002cf8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002cfc:	4642      	mov	r2, r8
 8002cfe:	464b      	mov	r3, r9
 8002d00:	1891      	adds	r1, r2, r2
 8002d02:	61b9      	str	r1, [r7, #24]
 8002d04:	415b      	adcs	r3, r3
 8002d06:	61fb      	str	r3, [r7, #28]
 8002d08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d0c:	4641      	mov	r1, r8
 8002d0e:	1851      	adds	r1, r2, r1
 8002d10:	6139      	str	r1, [r7, #16]
 8002d12:	4649      	mov	r1, r9
 8002d14:	414b      	adcs	r3, r1
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	f04f 0300 	mov.w	r3, #0
 8002d20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d24:	4659      	mov	r1, fp
 8002d26:	00cb      	lsls	r3, r1, #3
 8002d28:	4651      	mov	r1, sl
 8002d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d2e:	4651      	mov	r1, sl
 8002d30:	00ca      	lsls	r2, r1, #3
 8002d32:	4610      	mov	r0, r2
 8002d34:	4619      	mov	r1, r3
 8002d36:	4603      	mov	r3, r0
 8002d38:	4642      	mov	r2, r8
 8002d3a:	189b      	adds	r3, r3, r2
 8002d3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d40:	464b      	mov	r3, r9
 8002d42:	460a      	mov	r2, r1
 8002d44:	eb42 0303 	adc.w	r3, r2, r3
 8002d48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d56:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	f04f 0300 	mov.w	r3, #0
 8002d60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d64:	4649      	mov	r1, r9
 8002d66:	008b      	lsls	r3, r1, #2
 8002d68:	4641      	mov	r1, r8
 8002d6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d6e:	4641      	mov	r1, r8
 8002d70:	008a      	lsls	r2, r1, #2
 8002d72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d76:	f7fd fa27 	bl	80001c8 <__aeabi_uldivmod>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	4b39      	ldr	r3, [pc, #228]	; (8002e64 <UART_SetConfig+0x4e4>)
 8002d80:	fba3 1302 	umull	r1, r3, r3, r2
 8002d84:	095b      	lsrs	r3, r3, #5
 8002d86:	2164      	movs	r1, #100	; 0x64
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	3332      	adds	r3, #50	; 0x32
 8002d92:	4a34      	ldr	r2, [pc, #208]	; (8002e64 <UART_SetConfig+0x4e4>)
 8002d94:	fba2 2303 	umull	r2, r3, r2, r3
 8002d98:	095b      	lsrs	r3, r3, #5
 8002d9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d9e:	441c      	add	r4, r3
 8002da0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002da4:	2200      	movs	r2, #0
 8002da6:	673b      	str	r3, [r7, #112]	; 0x70
 8002da8:	677a      	str	r2, [r7, #116]	; 0x74
 8002daa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002dae:	4642      	mov	r2, r8
 8002db0:	464b      	mov	r3, r9
 8002db2:	1891      	adds	r1, r2, r2
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	415b      	adcs	r3, r3
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dbe:	4641      	mov	r1, r8
 8002dc0:	1851      	adds	r1, r2, r1
 8002dc2:	6039      	str	r1, [r7, #0]
 8002dc4:	4649      	mov	r1, r9
 8002dc6:	414b      	adcs	r3, r1
 8002dc8:	607b      	str	r3, [r7, #4]
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002dd6:	4659      	mov	r1, fp
 8002dd8:	00cb      	lsls	r3, r1, #3
 8002dda:	4651      	mov	r1, sl
 8002ddc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002de0:	4651      	mov	r1, sl
 8002de2:	00ca      	lsls	r2, r1, #3
 8002de4:	4610      	mov	r0, r2
 8002de6:	4619      	mov	r1, r3
 8002de8:	4603      	mov	r3, r0
 8002dea:	4642      	mov	r2, r8
 8002dec:	189b      	adds	r3, r3, r2
 8002dee:	66bb      	str	r3, [r7, #104]	; 0x68
 8002df0:	464b      	mov	r3, r9
 8002df2:	460a      	mov	r2, r1
 8002df4:	eb42 0303 	adc.w	r3, r2, r3
 8002df8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	663b      	str	r3, [r7, #96]	; 0x60
 8002e04:	667a      	str	r2, [r7, #100]	; 0x64
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002e12:	4649      	mov	r1, r9
 8002e14:	008b      	lsls	r3, r1, #2
 8002e16:	4641      	mov	r1, r8
 8002e18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e1c:	4641      	mov	r1, r8
 8002e1e:	008a      	lsls	r2, r1, #2
 8002e20:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e24:	f7fd f9d0 	bl	80001c8 <__aeabi_uldivmod>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <UART_SetConfig+0x4e4>)
 8002e2e:	fba3 1302 	umull	r1, r3, r3, r2
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	2164      	movs	r1, #100	; 0x64
 8002e36:	fb01 f303 	mul.w	r3, r1, r3
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	3332      	adds	r3, #50	; 0x32
 8002e40:	4a08      	ldr	r2, [pc, #32]	; (8002e64 <UART_SetConfig+0x4e4>)
 8002e42:	fba2 2303 	umull	r2, r3, r2, r3
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	f003 020f 	and.w	r2, r3, #15
 8002e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4422      	add	r2, r4
 8002e54:	609a      	str	r2, [r3, #8]
}
 8002e56:	bf00      	nop
 8002e58:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e62:	bf00      	nop
 8002e64:	51eb851f 	.word	0x51eb851f

08002e68 <__libc_init_array>:
 8002e68:	b570      	push	{r4, r5, r6, lr}
 8002e6a:	4d0d      	ldr	r5, [pc, #52]	; (8002ea0 <__libc_init_array+0x38>)
 8002e6c:	4c0d      	ldr	r4, [pc, #52]	; (8002ea4 <__libc_init_array+0x3c>)
 8002e6e:	1b64      	subs	r4, r4, r5
 8002e70:	10a4      	asrs	r4, r4, #2
 8002e72:	2600      	movs	r6, #0
 8002e74:	42a6      	cmp	r6, r4
 8002e76:	d109      	bne.n	8002e8c <__libc_init_array+0x24>
 8002e78:	4d0b      	ldr	r5, [pc, #44]	; (8002ea8 <__libc_init_array+0x40>)
 8002e7a:	4c0c      	ldr	r4, [pc, #48]	; (8002eac <__libc_init_array+0x44>)
 8002e7c:	f000 f820 	bl	8002ec0 <_init>
 8002e80:	1b64      	subs	r4, r4, r5
 8002e82:	10a4      	asrs	r4, r4, #2
 8002e84:	2600      	movs	r6, #0
 8002e86:	42a6      	cmp	r6, r4
 8002e88:	d105      	bne.n	8002e96 <__libc_init_array+0x2e>
 8002e8a:	bd70      	pop	{r4, r5, r6, pc}
 8002e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e90:	4798      	blx	r3
 8002e92:	3601      	adds	r6, #1
 8002e94:	e7ee      	b.n	8002e74 <__libc_init_array+0xc>
 8002e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e9a:	4798      	blx	r3
 8002e9c:	3601      	adds	r6, #1
 8002e9e:	e7f2      	b.n	8002e86 <__libc_init_array+0x1e>
 8002ea0:	08002ef8 	.word	0x08002ef8
 8002ea4:	08002ef8 	.word	0x08002ef8
 8002ea8:	08002ef8 	.word	0x08002ef8
 8002eac:	08002efc 	.word	0x08002efc

08002eb0 <memset>:
 8002eb0:	4402      	add	r2, r0
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d100      	bne.n	8002eba <memset+0xa>
 8002eb8:	4770      	bx	lr
 8002eba:	f803 1b01 	strb.w	r1, [r3], #1
 8002ebe:	e7f9      	b.n	8002eb4 <memset+0x4>

08002ec0 <_init>:
 8002ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec2:	bf00      	nop
 8002ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ec6:	bc08      	pop	{r3}
 8002ec8:	469e      	mov	lr, r3
 8002eca:	4770      	bx	lr

08002ecc <_fini>:
 8002ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ece:	bf00      	nop
 8002ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ed2:	bc08      	pop	{r3}
 8002ed4:	469e      	mov	lr, r3
 8002ed6:	4770      	bx	lr
