
TG_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000381c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080039a4  080039a4  000139a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039bc  080039bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080039bc  080039bc  000139bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039c4  080039c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039c4  080039c4  000139c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039c8  080039c8  000139c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080039cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000011c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000128  20000128  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ac7d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c84  00000000  00000000  0002acb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000838  00000000  00000000  0002c940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000780  00000000  00000000  0002d178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021917  00000000  00000000  0002d8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b5df  00000000  00000000  0004f20f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce86e  00000000  00000000  0005a7ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012905c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000200c  00000000  00000000  001290ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800398c 	.word	0x0800398c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800398c 	.word	0x0800398c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <Button__Initialize>:
static uint32_t Previous_Time;

static GPIO_PinState Previous_Button_State;

void Button__Initialize(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	460b      	mov	r3, r1
 80004d6:	807b      	strh	r3, [r7, #2]
	Previous_Time = HAL_GetTick();
 80004d8:	f000 fdd2 	bl	8001080 <HAL_GetTick>
 80004dc:	4603      	mov	r3, r0
 80004de:	4a07      	ldr	r2, [pc, #28]	; (80004fc <Button__Initialize+0x30>)
 80004e0:	6013      	str	r3, [r2, #0]
	Previous_Button_State = GPIO_PIN_RESET;
 80004e2:	4b07      	ldr	r3, [pc, #28]	; (8000500 <Button__Initialize+0x34>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	701a      	strb	r2, [r3, #0]
	Port = GPIOx;
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <Button__Initialize+0x38>)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	6013      	str	r3, [r2, #0]
	Pin = GPIO_Pin;
 80004ee:	4a06      	ldr	r2, [pc, #24]	; (8000508 <Button__Initialize+0x3c>)
 80004f0:	887b      	ldrh	r3, [r7, #2]
 80004f2:	8013      	strh	r3, [r2, #0]
}
 80004f4:	bf00      	nop
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20000030 	.word	0x20000030
 8000500:	20000034 	.word	0x20000034
 8000504:	20000028 	.word	0x20000028
 8000508:	2000002c 	.word	0x2000002c

0800050c <Button__GetTransitionEvent>:

uint8_t Button__GetTransitionEvent(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
	uint8_t ret_val = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	71fb      	strb	r3, [r7, #7]

	GPIO_PinState button_state = Previous_Button_State;
 8000516:	4b18      	ldr	r3, [pc, #96]	; (8000578 <Button__GetTransitionEvent+0x6c>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	71bb      	strb	r3, [r7, #6]
	uint32_t current_time;

    current_time = HAL_GetTick();
 800051c:	f000 fdb0 	bl	8001080 <HAL_GetTick>
 8000520:	6038      	str	r0, [r7, #0]
    if ( (current_time - Previous_Time) > READING_RATE)
 8000522:	4b16      	ldr	r3, [pc, #88]	; (800057c <Button__GetTransitionEvent+0x70>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	683a      	ldr	r2, [r7, #0]
 8000528:	1ad3      	subs	r3, r2, r3
 800052a:	2b64      	cmp	r3, #100	; 0x64
 800052c:	d913      	bls.n	8000556 <Button__GetTransitionEvent+0x4a>
    {
    	button_state = HAL_GPIO_ReadPin(Port, Pin);
 800052e:	4b14      	ldr	r3, [pc, #80]	; (8000580 <Button__GetTransitionEvent+0x74>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4a14      	ldr	r2, [pc, #80]	; (8000584 <Button__GetTransitionEvent+0x78>)
 8000534:	8812      	ldrh	r2, [r2, #0]
 8000536:	4611      	mov	r1, r2
 8000538:	4618      	mov	r0, r3
 800053a:	f001 fcb9 	bl	8001eb0 <HAL_GPIO_ReadPin>
 800053e:	4603      	mov	r3, r0
 8000540:	71bb      	strb	r3, [r7, #6]
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, button_state);
 8000542:	79bb      	ldrb	r3, [r7, #6]
 8000544:	461a      	mov	r2, r3
 8000546:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054a:	480f      	ldr	r0, [pc, #60]	; (8000588 <Button__GetTransitionEvent+0x7c>)
 800054c:	f001 fcc8 	bl	8001ee0 <HAL_GPIO_WritePin>
		Previous_Time = current_time;
 8000550:	4a0a      	ldr	r2, [pc, #40]	; (800057c <Button__GetTransitionEvent+0x70>)
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	6013      	str	r3, [r2, #0]
    }

    if(button_state == GPIO_PIN_SET && Previous_Button_State == GPIO_PIN_RESET)
 8000556:	79bb      	ldrb	r3, [r7, #6]
 8000558:	2b01      	cmp	r3, #1
 800055a:	d108      	bne.n	800056e <Button__GetTransitionEvent+0x62>
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <Button__GetTransitionEvent+0x6c>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d104      	bne.n	800056e <Button__GetTransitionEvent+0x62>
    {
    	button_state = Previous_Button_State;
 8000564:	4b04      	ldr	r3, [pc, #16]	; (8000578 <Button__GetTransitionEvent+0x6c>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	71bb      	strb	r3, [r7, #6]
    	ret_val = 1;
 800056a:	2301      	movs	r3, #1
 800056c:	71fb      	strb	r3, [r7, #7]
    }

    return ret_val;
 800056e:	79fb      	ldrb	r3, [r7, #7]
}
 8000570:	4618      	mov	r0, r3
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000034 	.word	0x20000034
 800057c:	20000030 	.word	0x20000030
 8000580:	20000028 	.word	0x20000028
 8000584:	2000002c 	.word	0x2000002c
 8000588:	40020c00 	.word	0x40020c00

0800058c <Communication__Initialize>:
#include "string.h"

static UART_HandleTypeDef * myUart;

void Communication__Initialize(UART_HandleTypeDef *huart)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	myUart = huart;
 8000594:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <Communication__Initialize+0x1c>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6013      	str	r3, [r2, #0]
}
 800059a:	bf00      	nop
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000038 	.word	0x20000038

080005ac <Communication__SendNewMessage>:

void Communication__SendNewMessage(float value)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t payload[BUFFER_SIZE];

	uint8_t * byte_ptr = (uint8_t *) &value;
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	61fb      	str	r3, [r7, #28]

	memset(&payload, 0, sizeof(payload));
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	220d      	movs	r2, #13
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f003 f9da 	bl	800397c <memset>

	payload[0] = 5;
 80005c8:	2305      	movs	r3, #5
 80005ca:	733b      	strb	r3, [r7, #12]
	payload[1] = byte_ptr[3];
 80005cc:	69fb      	ldr	r3, [r7, #28]
 80005ce:	78db      	ldrb	r3, [r3, #3]
 80005d0:	737b      	strb	r3, [r7, #13]
	payload[2] = byte_ptr[2];
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	789b      	ldrb	r3, [r3, #2]
 80005d6:	73bb      	strb	r3, [r7, #14]
	payload[3] = byte_ptr[1];
 80005d8:	69fb      	ldr	r3, [r7, #28]
 80005da:	785b      	ldrb	r3, [r3, #1]
 80005dc:	73fb      	strb	r3, [r7, #15]
	payload[4] = byte_ptr[0];
 80005de:	69fb      	ldr	r3, [r7, #28]
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	743b      	strb	r3, [r7, #16]

	HAL_UART_Transmit(myUart, payload, sizeof(payload), 100);
 80005e4:	4b05      	ldr	r3, [pc, #20]	; (80005fc <Communication__SendNewMessage+0x50>)
 80005e6:	6818      	ldr	r0, [r3, #0]
 80005e8:	f107 010c 	add.w	r1, r7, #12
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	220d      	movs	r2, #13
 80005f0:	f002 f975 	bl	80028de <HAL_UART_Transmit>
}
 80005f4:	bf00      	nop
 80005f6:	3720      	adds	r7, #32
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000038 	.word	0x20000038

08000600 <Communication__ReceiveNewMessage>:

void Communication__ReceiveNewMessage(uint8_t *buffer)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	memset(buffer, 0, sizeof(*buffer));
 8000608:	2201      	movs	r2, #1
 800060a:	2100      	movs	r1, #0
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f003 f9b5 	bl	800397c <memset>
	HAL_UART_Receive_IT(myUart, buffer, BUFFER_SIZE);
 8000612:	4b05      	ldr	r3, [pc, #20]	; (8000628 <Communication__ReceiveNewMessage+0x28>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	220d      	movs	r2, #13
 8000618:	6879      	ldr	r1, [r7, #4]
 800061a:	4618      	mov	r0, r3
 800061c:	f002 f9f1 	bl	8002a02 <HAL_UART_Receive_IT>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000038 	.word	0x20000038

0800062c <PotSensor__Initialize>:
#include "PotSensor.h"

static ADC_HandleTypeDef* myAdcVar;

void PotSensor__Initialize(ADC_HandleTypeDef* adc_var)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	myAdcVar = adc_var;
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <PotSensor__Initialize+0x1c>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6013      	str	r3, [r2, #0]
}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	2000003c 	.word	0x2000003c

0800064c <PotSensor__GetResistanceValue>:

float PotSensor__GetResistanceValue(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
	float ret_val = 0;
 8000652:	f04f 0300 	mov.w	r3, #0
 8000656:	607b      	str	r3, [r7, #4]

	HAL_ADC_Start(myAdcVar);
 8000658:	4b14      	ldr	r3, [pc, #80]	; (80006ac <PotSensor__GetResistanceValue+0x60>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fd5f 	bl	8001120 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(myAdcVar, 100);
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <PotSensor__GetResistanceValue+0x60>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2164      	movs	r1, #100	; 0x64
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fe2b 	bl	80012c4 <HAL_ADC_PollForConversion>
	ret_val = (float) HAL_ADC_GetValue(myAdcVar);
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <PotSensor__GetResistanceValue+0x60>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4618      	mov	r0, r3
 8000674:	f000 feb1 	bl	80013da <HAL_ADC_GetValue>
 8000678:	ee07 0a90 	vmov	s15, r0
 800067c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000680:	edc7 7a01 	vstr	s15, [r7, #4]

	ret_val = (10 * ret_val)/4095;
 8000684:	edd7 7a01 	vldr	s15, [r7, #4]
 8000688:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800068c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000690:	eddf 6a07 	vldr	s13, [pc, #28]	; 80006b0 <PotSensor__GetResistanceValue+0x64>
 8000694:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000698:	edc7 7a01 	vstr	s15, [r7, #4]

	return ret_val;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	ee07 3a90 	vmov	s15, r3
}
 80006a2:	eeb0 0a67 	vmov.f32	s0, s15
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	2000003c 	.word	0x2000003c
 80006b0:	457ff000 	.word	0x457ff000

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	Previous_Send_Time = 0;
 80006b8:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <main+0xb4>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006be:	f000 fc79 	bl	8000fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c2:	f000 f85d 	bl	8000780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c6:	f000 f96b 	bl	80009a0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006ca:	f000 f8c3 	bl	8000854 <MX_ADC1_Init>
  MX_UART5_Init();
 80006ce:	f000 f93d 	bl	800094c <MX_UART5_Init>
  MX_UART4_Init();
 80006d2:	f000 f911 	bl	80008f8 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  PotSensor__Initialize(&hadc1);
 80006d6:	4825      	ldr	r0, [pc, #148]	; (800076c <main+0xb8>)
 80006d8:	f7ff ffa8 	bl	800062c <PotSensor__Initialize>
  Communication__Initialize(&huart5);
 80006dc:	4824      	ldr	r0, [pc, #144]	; (8000770 <main+0xbc>)
 80006de:	f7ff ff55 	bl	800058c <Communication__Initialize>
  Button__Initialize(B1_GPIO_Port, B1_Pin);
 80006e2:	2101      	movs	r1, #1
 80006e4:	4823      	ldr	r0, [pc, #140]	; (8000774 <main+0xc0>)
 80006e6:	f7ff fef1 	bl	80004cc <Button__Initialize>

  // Start listening the communication bus, when a message is available it executes the callback
  Communication__ReceiveNewMessage(Buffer);
 80006ea:	4823      	ldr	r0, [pc, #140]	; (8000778 <main+0xc4>)
 80006ec:	f7ff ff88 	bl	8000600 <Communication__ReceiveNewMessage>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if ((HAL_GetTick() - Previous_Send_Time) >= MESSAGE_RATE)
 80006f0:	f000 fcc6 	bl	8001080 <HAL_GetTick>
 80006f4:	4602      	mov	r2, r0
 80006f6:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <main+0xb4>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	1ad3      	subs	r3, r2, r3
 80006fc:	2b09      	cmp	r3, #9
 80006fe:	d90c      	bls.n	800071a <main+0x66>
	{
		Communication__SendNewMessage(PotSensor__GetResistanceValue());
 8000700:	f7ff ffa4 	bl	800064c <PotSensor__GetResistanceValue>
 8000704:	eef0 7a40 	vmov.f32	s15, s0
 8000708:	eeb0 0a67 	vmov.f32	s0, s15
 800070c:	f7ff ff4e 	bl	80005ac <Communication__SendNewMessage>
		Previous_Send_Time = HAL_GetTick();
 8000710:	f000 fcb6 	bl	8001080 <HAL_GetTick>
 8000714:	4603      	mov	r3, r0
 8000716:	4a14      	ldr	r2, [pc, #80]	; (8000768 <main+0xb4>)
 8000718:	6013      	str	r3, [r2, #0]

	}
	if ((Button__GetTransitionEvent() == EVENT_CLICK) ||
 800071a:	f7ff fef7 	bl	800050c <Button__GetTransitionEvent>
 800071e:	4603      	mov	r3, r0
 8000720:	2b01      	cmp	r3, #1
 8000722:	d003      	beq.n	800072c <main+0x78>
		(Buffer[0] == 0xFF) )
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <main+0xc4>)
 8000726:	781b      	ldrb	r3, [r3, #0]
	if ((Button__GetTransitionEvent() == EVENT_CLICK) ||
 8000728:	2bff      	cmp	r3, #255	; 0xff
 800072a:	d107      	bne.n	800073c <main+0x88>
	{
		Communication__SendNewMessage(PotSensor__GetResistanceValue());
 800072c:	f7ff ff8e 	bl	800064c <PotSensor__GetResistanceValue>
 8000730:	eef0 7a40 	vmov.f32	s15, s0
 8000734:	eeb0 0a67 	vmov.f32	s0, s15
 8000738:	f7ff ff38 	bl	80005ac <Communication__SendNewMessage>
	}

    // Visual feedback for Analog Read and Button Read
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, ((PotSensor__GetResistanceValue() > 5) ? GPIO_PIN_SET : GPIO_PIN_RESET));
 800073c:	f7ff ff86 	bl	800064c <PotSensor__GetResistanceValue>
 8000740:	eef0 7a40 	vmov.f32	s15, s0
 8000744:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000748:	eef4 7ac7 	vcmpe.f32	s15, s14
 800074c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000750:	bfcc      	ite	gt
 8000752:	2301      	movgt	r3, #1
 8000754:	2300      	movle	r3, #0
 8000756:	b2db      	uxtb	r3, r3
 8000758:	461a      	mov	r2, r3
 800075a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800075e:	4807      	ldr	r0, [pc, #28]	; (800077c <main+0xc8>)
 8000760:	f001 fbbe 	bl	8001ee0 <HAL_GPIO_WritePin>
	if ((HAL_GetTick() - Previous_Send_Time) >= MESSAGE_RATE)
 8000764:	e7c4      	b.n	80006f0 <main+0x3c>
 8000766:	bf00      	nop
 8000768:	20000110 	.word	0x20000110
 800076c:	20000040 	.word	0x20000040
 8000770:	200000cc 	.word	0x200000cc
 8000774:	40020000 	.word	0x40020000
 8000778:	20000114 	.word	0x20000114
 800077c:	40020c00 	.word	0x40020c00

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b094      	sub	sp, #80	; 0x50
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 0320 	add.w	r3, r7, #32
 800078a:	2230      	movs	r2, #48	; 0x30
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f003 f8f4 	bl	800397c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	4b28      	ldr	r3, [pc, #160]	; (800084c <SystemClock_Config+0xcc>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ac:	4a27      	ldr	r2, [pc, #156]	; (800084c <SystemClock_Config+0xcc>)
 80007ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b2:	6413      	str	r3, [r2, #64]	; 0x40
 80007b4:	4b25      	ldr	r3, [pc, #148]	; (800084c <SystemClock_Config+0xcc>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c0:	2300      	movs	r3, #0
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	4b22      	ldr	r3, [pc, #136]	; (8000850 <SystemClock_Config+0xd0>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a21      	ldr	r2, [pc, #132]	; (8000850 <SystemClock_Config+0xd0>)
 80007ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ce:	6013      	str	r3, [r2, #0]
 80007d0:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <SystemClock_Config+0xd0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007dc:	2301      	movs	r3, #1
 80007de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e6:	2302      	movs	r3, #2
 80007e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007f0:	2308      	movs	r3, #8
 80007f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007fa:	2302      	movs	r3, #2
 80007fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007fe:	2307      	movs	r3, #7
 8000800:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000802:	f107 0320 	add.w	r3, r7, #32
 8000806:	4618      	mov	r0, r3
 8000808:	f001 fb84 	bl	8001f14 <HAL_RCC_OscConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000812:	f000 fa35 	bl	8000c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000816:	230f      	movs	r3, #15
 8000818:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081a:	2302      	movs	r3, #2
 800081c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000822:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000826:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	2105      	movs	r1, #5
 8000834:	4618      	mov	r0, r3
 8000836:	f001 fde5 	bl	8002404 <HAL_RCC_ClockConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000840:	f000 fa1e 	bl	8000c80 <Error_Handler>
  }
}
 8000844:	bf00      	nop
 8000846:	3750      	adds	r7, #80	; 0x50
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800
 8000850:	40007000 	.word	0x40007000

08000854 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800085a:	463b      	mov	r3, r7
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000866:	4b21      	ldr	r3, [pc, #132]	; (80008ec <MX_ADC1_Init+0x98>)
 8000868:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <MX_ADC1_Init+0x9c>)
 800086a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <MX_ADC1_Init+0x98>)
 800086e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000872:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000874:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <MX_ADC1_Init+0x98>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800087a:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <MX_ADC1_Init+0x98>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_ADC1_Init+0x98>)
 8000882:	2200      	movs	r2, #0
 8000884:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000886:	4b19      	ldr	r3, [pc, #100]	; (80008ec <MX_ADC1_Init+0x98>)
 8000888:	2200      	movs	r2, #0
 800088a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_ADC1_Init+0x98>)
 8000890:	2200      	movs	r2, #0
 8000892:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_ADC1_Init+0x98>)
 8000896:	4a17      	ldr	r2, [pc, #92]	; (80008f4 <MX_ADC1_Init+0xa0>)
 8000898:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_ADC1_Init+0x98>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_ADC1_Init+0x98>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_ADC1_Init+0x98>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_ADC1_Init+0x98>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008b4:	480d      	ldr	r0, [pc, #52]	; (80008ec <MX_ADC1_Init+0x98>)
 80008b6:	f000 fbef 	bl	8001098 <HAL_ADC_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008c0:	f000 f9de 	bl	8000c80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008c4:	2301      	movs	r3, #1
 80008c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008c8:	2301      	movs	r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d0:	463b      	mov	r3, r7
 80008d2:	4619      	mov	r1, r3
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_ADC1_Init+0x98>)
 80008d6:	f000 fd8d 	bl	80013f4 <HAL_ADC_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008e0:	f000 f9ce 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000040 	.word	0x20000040
 80008f0:	40012000 	.word	0x40012000
 80008f4:	0f000001 	.word	0x0f000001

080008f8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_UART4_Init+0x4c>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	; (8000948 <MX_UART4_Init+0x50>)
 8000900:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 230400;
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <MX_UART4_Init+0x4c>)
 8000904:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000908:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_UART4_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_UART4_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_UART4_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_UART4_Init+0x4c>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_UART4_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_UART4_Init+0x4c>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_UART4_Init+0x4c>)
 8000930:	f001 ff88 	bl	8002844 <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800093a:	f000 f9a1 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000088 	.word	0x20000088
 8000948:	40004c00 	.word	0x40004c00

0800094c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_UART5_Init+0x4c>)
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <MX_UART5_Init+0x50>)
 8000954:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 230400;
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <MX_UART5_Init+0x4c>)
 8000958:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 800095c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_UART5_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_UART5_Init+0x4c>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_UART5_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_UART5_Init+0x4c>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_UART5_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_UART5_Init+0x4c>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_UART5_Init+0x4c>)
 8000984:	f001 ff5e 	bl	8002844 <HAL_UART_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800098e:	f000 f977 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200000cc 	.word	0x200000cc
 800099c:	40005000 	.word	0x40005000

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08c      	sub	sp, #48	; 0x30
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	61bb      	str	r3, [r7, #24]
 80009ba:	4ba1      	ldr	r3, [pc, #644]	; (8000c40 <MX_GPIO_Init+0x2a0>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4aa0      	ldr	r2, [pc, #640]	; (8000c40 <MX_GPIO_Init+0x2a0>)
 80009c0:	f043 0310 	orr.w	r3, r3, #16
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b9e      	ldr	r3, [pc, #632]	; (8000c40 <MX_GPIO_Init+0x2a0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0310 	and.w	r3, r3, #16
 80009ce:	61bb      	str	r3, [r7, #24]
 80009d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
 80009d6:	4b9a      	ldr	r3, [pc, #616]	; (8000c40 <MX_GPIO_Init+0x2a0>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a99      	ldr	r2, [pc, #612]	; (8000c40 <MX_GPIO_Init+0x2a0>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b97      	ldr	r3, [pc, #604]	; (8000c40 <MX_GPIO_Init+0x2a0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	4b93      	ldr	r3, [pc, #588]	; (8000c40 <MX_GPIO_Init+0x2a0>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a92      	ldr	r2, [pc, #584]	; (8000c40 <MX_GPIO_Init+0x2a0>)
 80009f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b90      	ldr	r3, [pc, #576]	; (8000c40 <MX_GPIO_Init+0x2a0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	4b8c      	ldr	r3, [pc, #560]	; (8000c40 <MX_GPIO_Init+0x2a0>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a8b      	ldr	r2, [pc, #556]	; (8000c40 <MX_GPIO_Init+0x2a0>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b89      	ldr	r3, [pc, #548]	; (8000c40 <MX_GPIO_Init+0x2a0>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	4b85      	ldr	r3, [pc, #532]	; (8000c40 <MX_GPIO_Init+0x2a0>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a84      	ldr	r2, [pc, #528]	; (8000c40 <MX_GPIO_Init+0x2a0>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b82      	ldr	r3, [pc, #520]	; (8000c40 <MX_GPIO_Init+0x2a0>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b7e      	ldr	r3, [pc, #504]	; (8000c40 <MX_GPIO_Init+0x2a0>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a7d      	ldr	r2, [pc, #500]	; (8000c40 <MX_GPIO_Init+0x2a0>)
 8000a4c:	f043 0308 	orr.w	r3, r3, #8
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b7b      	ldr	r3, [pc, #492]	; (8000c40 <MX_GPIO_Init+0x2a0>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0308 	and.w	r3, r3, #8
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2108      	movs	r1, #8
 8000a62:	4878      	ldr	r0, [pc, #480]	; (8000c44 <MX_GPIO_Init+0x2a4>)
 8000a64:	f001 fa3c 	bl	8001ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	4876      	ldr	r0, [pc, #472]	; (8000c48 <MX_GPIO_Init+0x2a8>)
 8000a6e:	f001 fa37 	bl	8001ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a72:	2200      	movs	r2, #0
 8000a74:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a78:	4874      	ldr	r0, [pc, #464]	; (8000c4c <MX_GPIO_Init+0x2ac>)
 8000a7a:	f001 fa31 	bl	8001ee0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a7e:	2308      	movs	r3, #8
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	486b      	ldr	r0, [pc, #428]	; (8000c44 <MX_GPIO_Init+0x2a4>)
 8000a96:	f001 f86f 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4865      	ldr	r0, [pc, #404]	; (8000c48 <MX_GPIO_Init+0x2a8>)
 8000ab2:	f001 f861 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ab6:	2308      	movs	r3, #8
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ac6:	2305      	movs	r3, #5
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	485d      	ldr	r0, [pc, #372]	; (8000c48 <MX_GPIO_Init+0x2a8>)
 8000ad2:	f001 f851 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ada:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4859      	ldr	r0, [pc, #356]	; (8000c50 <MX_GPIO_Init+0x2b0>)
 8000aec:	f001 f844 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000af0:	2310      	movs	r3, #16
 8000af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b00:	2306      	movs	r3, #6
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4851      	ldr	r0, [pc, #324]	; (8000c50 <MX_GPIO_Init+0x2b0>)
 8000b0c:	f001 f834 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b10:	23e0      	movs	r3, #224	; 0xe0
 8000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b20:	2305      	movs	r3, #5
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4849      	ldr	r0, [pc, #292]	; (8000c50 <MX_GPIO_Init+0x2b0>)
 8000b2c:	f001 f824 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b30:	2304      	movs	r3, #4
 8000b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	4619      	mov	r1, r3
 8000b42:	4844      	ldr	r0, [pc, #272]	; (8000c54 <MX_GPIO_Init+0x2b4>)
 8000b44:	f001 f818 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b5a:	2305      	movs	r3, #5
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	4619      	mov	r1, r3
 8000b64:	483b      	ldr	r0, [pc, #236]	; (8000c54 <MX_GPIO_Init+0x2b4>)
 8000b66:	f001 f807 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b6a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b6e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	4619      	mov	r1, r3
 8000b82:	4832      	ldr	r0, [pc, #200]	; (8000c4c <MX_GPIO_Init+0x2ac>)
 8000b84:	f000 fff8 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 8000b88:	2380      	movs	r3, #128	; 0x80
 8000b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b98:	2306      	movs	r3, #6
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4829      	ldr	r0, [pc, #164]	; (8000c48 <MX_GPIO_Init+0x2a8>)
 8000ba4:	f000 ffe8 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000ba8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4824      	ldr	r0, [pc, #144]	; (8000c50 <MX_GPIO_Init+0x2b0>)
 8000bbe:	f000 ffdb 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000bc2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bd4:	230a      	movs	r3, #10
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd8:	f107 031c 	add.w	r3, r7, #28
 8000bdc:	4619      	mov	r1, r3
 8000bde:	481c      	ldr	r0, [pc, #112]	; (8000c50 <MX_GPIO_Init+0x2b0>)
 8000be0:	f000 ffca 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000be4:	2320      	movs	r3, #32
 8000be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be8:	2300      	movs	r3, #0
 8000bea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4815      	ldr	r0, [pc, #84]	; (8000c4c <MX_GPIO_Init+0x2ac>)
 8000bf8:	f000 ffbe 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000bfc:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c02:	2312      	movs	r3, #18
 8000c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c0e:	2304      	movs	r3, #4
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c12:	f107 031c 	add.w	r3, r7, #28
 8000c16:	4619      	mov	r1, r3
 8000c18:	480e      	ldr	r0, [pc, #56]	; (8000c54 <MX_GPIO_Init+0x2b4>)
 8000c1a:	f000 ffad 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c22:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c2c:	f107 031c 	add.w	r3, r7, #28
 8000c30:	4619      	mov	r1, r3
 8000c32:	4804      	ldr	r0, [pc, #16]	; (8000c44 <MX_GPIO_Init+0x2a4>)
 8000c34:	f000 ffa0 	bl	8001b78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c38:	bf00      	nop
 8000c3a:	3730      	adds	r7, #48	; 0x30
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40020800 	.word	0x40020800
 8000c4c:	40020c00 	.word	0x40020c00
 8000c50:	40020000 	.word	0x40020000
 8000c54:	40020400 	.word	0x40020400

08000c58 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// Callback function that runs when a new message is available
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART5){
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <HAL_UART_RxCpltCallback+0x20>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d102      	bne.n	8000c70 <HAL_UART_RxCpltCallback+0x18>
		//After receiving a message, start listening again
		Communication__ReceiveNewMessage(Buffer);
 8000c6a:	4804      	ldr	r0, [pc, #16]	; (8000c7c <HAL_UART_RxCpltCallback+0x24>)
 8000c6c:	f7ff fcc8 	bl	8000600 <Communication__ReceiveNewMessage>
	}
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40005000 	.word	0x40005000
 8000c7c:	20000114 	.word	0x20000114

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <Error_Handler+0x8>
	...

08000c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	4a0f      	ldr	r2, [pc, #60]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	4a08      	ldr	r2, [pc, #32]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cca:	2007      	movs	r0, #7
 8000ccc:	f000 fe80 	bl	80019d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40023800 	.word	0x40023800

08000cdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	; 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a17      	ldr	r2, [pc, #92]	; (8000d58 <HAL_ADC_MspInit+0x7c>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d127      	bne.n	8000d4e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <HAL_ADC_MspInit+0x80>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	4a15      	ldr	r2, [pc, #84]	; (8000d5c <HAL_ADC_MspInit+0x80>)
 8000d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0e:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <HAL_ADC_MspInit+0x80>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <HAL_ADC_MspInit+0x80>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <HAL_ADC_MspInit+0x80>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <HAL_ADC_MspInit+0x80>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d36:	2302      	movs	r3, #2
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	4805      	ldr	r0, [pc, #20]	; (8000d60 <HAL_ADC_MspInit+0x84>)
 8000d4a:	f000 ff15 	bl	8001b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d4e:	bf00      	nop
 8000d50:	3728      	adds	r7, #40	; 0x28
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40012000 	.word	0x40012000
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020000 	.word	0x40020000

08000d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08c      	sub	sp, #48	; 0x30
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 031c 	add.w	r3, r7, #28
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a4a      	ldr	r2, [pc, #296]	; (8000eac <HAL_UART_MspInit+0x148>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d135      	bne.n	8000df2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
 8000d8a:	4b49      	ldr	r3, [pc, #292]	; (8000eb0 <HAL_UART_MspInit+0x14c>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	4a48      	ldr	r2, [pc, #288]	; (8000eb0 <HAL_UART_MspInit+0x14c>)
 8000d90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d94:	6413      	str	r3, [r2, #64]	; 0x40
 8000d96:	4b46      	ldr	r3, [pc, #280]	; (8000eb0 <HAL_UART_MspInit+0x14c>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d9e:	61bb      	str	r3, [r7, #24]
 8000da0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	4b42      	ldr	r3, [pc, #264]	; (8000eb0 <HAL_UART_MspInit+0x14c>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a41      	ldr	r2, [pc, #260]	; (8000eb0 <HAL_UART_MspInit+0x14c>)
 8000dac:	f043 0304 	orr.w	r3, r3, #4
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <HAL_UART_MspInit+0x14c>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0304 	and.w	r3, r3, #4
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000dbe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd4:	f107 031c 	add.w	r3, r7, #28
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4836      	ldr	r0, [pc, #216]	; (8000eb4 <HAL_UART_MspInit+0x150>)
 8000ddc:	f000 fecc 	bl	8001b78 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2100      	movs	r1, #0
 8000de4:	2034      	movs	r0, #52	; 0x34
 8000de6:	f000 fdfe 	bl	80019e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000dea:	2034      	movs	r0, #52	; 0x34
 8000dec:	f000 fe17 	bl	8001a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000df0:	e057      	b.n	8000ea2 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==UART5)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a30      	ldr	r2, [pc, #192]	; (8000eb8 <HAL_UART_MspInit+0x154>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d152      	bne.n	8000ea2 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <HAL_UART_MspInit+0x14c>)
 8000e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e04:	4a2a      	ldr	r2, [pc, #168]	; (8000eb0 <HAL_UART_MspInit+0x14c>)
 8000e06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0c:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <HAL_UART_MspInit+0x14c>)
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <HAL_UART_MspInit+0x14c>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e20:	4a23      	ldr	r2, [pc, #140]	; (8000eb0 <HAL_UART_MspInit+0x14c>)
 8000e22:	f043 0304 	orr.w	r3, r3, #4
 8000e26:	6313      	str	r3, [r2, #48]	; 0x30
 8000e28:	4b21      	ldr	r3, [pc, #132]	; (8000eb0 <HAL_UART_MspInit+0x14c>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2c:	f003 0304 	and.w	r3, r3, #4
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e34:	2300      	movs	r3, #0
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <HAL_UART_MspInit+0x14c>)
 8000e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3c:	4a1c      	ldr	r2, [pc, #112]	; (8000eb0 <HAL_UART_MspInit+0x14c>)
 8000e3e:	f043 0308 	orr.w	r3, r3, #8
 8000e42:	6313      	str	r3, [r2, #48]	; 0x30
 8000e44:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <HAL_UART_MspInit+0x14c>)
 8000e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e48:	f003 0308 	and.w	r3, r3, #8
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000e62:	2308      	movs	r3, #8
 8000e64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4811      	ldr	r0, [pc, #68]	; (8000eb4 <HAL_UART_MspInit+0x150>)
 8000e6e:	f000 fe83 	bl	8001b78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e72:	2304      	movs	r3, #4
 8000e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000e82:	2308      	movs	r3, #8
 8000e84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	480b      	ldr	r0, [pc, #44]	; (8000ebc <HAL_UART_MspInit+0x158>)
 8000e8e:	f000 fe73 	bl	8001b78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	2035      	movs	r0, #53	; 0x35
 8000e98:	f000 fda5 	bl	80019e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000e9c:	2035      	movs	r0, #53	; 0x35
 8000e9e:	f000 fdbe 	bl	8001a1e <HAL_NVIC_EnableIRQ>
}
 8000ea2:	bf00      	nop
 8000ea4:	3730      	adds	r7, #48	; 0x30
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40004c00 	.word	0x40004c00
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020800 	.word	0x40020800
 8000eb8:	40005000 	.word	0x40005000
 8000ebc:	40020c00 	.word	0x40020c00

08000ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <NMI_Handler+0x4>

08000ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <HardFault_Handler+0x4>

08000ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <MemManage_Handler+0x4>

08000ed2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <BusFault_Handler+0x4>

08000ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <UsageFault_Handler+0x4>

08000ede <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f0c:	f000 f8a4 	bl	8001058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000f18:	4802      	ldr	r0, [pc, #8]	; (8000f24 <UART4_IRQHandler+0x10>)
 8000f1a:	f001 fda3 	bl	8002a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000088 	.word	0x20000088

08000f28 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <UART5_IRQHandler+0x10>)
 8000f2e:	f001 fd99 	bl	8002a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200000cc 	.word	0x200000cc

08000f3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <SystemInit+0x20>)
 8000f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f46:	4a05      	ldr	r2, [pc, #20]	; (8000f5c <SystemInit+0x20>)
 8000f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f64:	480d      	ldr	r0, [pc, #52]	; (8000f9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f66:	490e      	ldr	r1, [pc, #56]	; (8000fa0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f68:	4a0e      	ldr	r2, [pc, #56]	; (8000fa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f6c:	e002      	b.n	8000f74 <LoopCopyDataInit>

08000f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f72:	3304      	adds	r3, #4

08000f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f78:	d3f9      	bcc.n	8000f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7a:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f7c:	4c0b      	ldr	r4, [pc, #44]	; (8000fac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f80:	e001      	b.n	8000f86 <LoopFillZerobss>

08000f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f84:	3204      	adds	r2, #4

08000f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f88:	d3fb      	bcc.n	8000f82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f8a:	f7ff ffd7 	bl	8000f3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f8e:	f002 fcd1 	bl	8003934 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f92:	f7ff fb8f 	bl	80006b4 <main>
  bx  lr    
 8000f96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fa4:	080039cc 	.word	0x080039cc
  ldr r2, =_sbss
 8000fa8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fac:	20000128 	.word	0x20000128

08000fb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb0:	e7fe      	b.n	8000fb0 <ADC_IRQHandler>
	...

08000fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	; (8000ff4 <HAL_Init+0x40>)
 8000fbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <HAL_Init+0x40>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <HAL_Init+0x40>)
 8000fca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <HAL_Init+0x40>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <HAL_Init+0x40>)
 8000fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fdc:	2003      	movs	r0, #3
 8000fde:	f000 fcf7 	bl	80019d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f000 f808 	bl	8000ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe8:	f7ff fe50 	bl	8000c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023c00 	.word	0x40023c00

08000ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_InitTick+0x54>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_InitTick+0x58>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4619      	mov	r1, r3
 800100a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001012:	fbb2 f3f3 	udiv	r3, r2, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f000 fd0f 	bl	8001a3a <HAL_SYSTICK_Config>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e00e      	b.n	8001044 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b0f      	cmp	r3, #15
 800102a:	d80a      	bhi.n	8001042 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800102c:	2200      	movs	r2, #0
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001034:	f000 fcd7 	bl	80019e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001038:	4a06      	ldr	r2, [pc, #24]	; (8001054 <HAL_InitTick+0x5c>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800103e:	2300      	movs	r3, #0
 8001040:	e000      	b.n	8001044 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000000 	.word	0x20000000
 8001050:	20000008 	.word	0x20000008
 8001054:	20000004 	.word	0x20000004

08001058 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_IncTick+0x20>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_IncTick+0x24>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4413      	add	r3, r2
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <HAL_IncTick+0x24>)
 800106a:	6013      	str	r3, [r2, #0]
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000008 	.word	0x20000008
 800107c:	20000124 	.word	0x20000124

08001080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return uwTick;
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <HAL_GetTick+0x14>)
 8001086:	681b      	ldr	r3, [r3, #0]
}
 8001088:	4618      	mov	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000124 	.word	0x20000124

08001098 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010a0:	2300      	movs	r3, #0
 80010a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d101      	bne.n	80010ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e033      	b.n	8001116 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d109      	bne.n	80010ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff fe10 	bl	8000cdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f003 0310 	and.w	r3, r3, #16
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d118      	bne.n	8001108 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010de:	f023 0302 	bic.w	r3, r3, #2
 80010e2:	f043 0202 	orr.w	r2, r3, #2
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 faa4 	bl	8001638 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	f023 0303 	bic.w	r3, r3, #3
 80010fe:	f043 0201 	orr.w	r2, r3, #1
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	641a      	str	r2, [r3, #64]	; 0x40
 8001106:	e001      	b.n	800110c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001114:	7bfb      	ldrb	r3, [r7, #15]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001132:	2b01      	cmp	r3, #1
 8001134:	d101      	bne.n	800113a <HAL_ADC_Start+0x1a>
 8001136:	2302      	movs	r3, #2
 8001138:	e0b2      	b.n	80012a0 <HAL_ADC_Start+0x180>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2201      	movs	r2, #1
 800113e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	2b01      	cmp	r3, #1
 800114e:	d018      	beq.n	8001182 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 0201 	orr.w	r2, r2, #1
 800115e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001160:	4b52      	ldr	r3, [pc, #328]	; (80012ac <HAL_ADC_Start+0x18c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a52      	ldr	r2, [pc, #328]	; (80012b0 <HAL_ADC_Start+0x190>)
 8001166:	fba2 2303 	umull	r2, r3, r2, r3
 800116a:	0c9a      	lsrs	r2, r3, #18
 800116c:	4613      	mov	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	4413      	add	r3, r2
 8001172:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001174:	e002      	b.n	800117c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	3b01      	subs	r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f9      	bne.n	8001176 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	2b01      	cmp	r3, #1
 800118e:	d17a      	bne.n	8001286 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001198:	f023 0301 	bic.w	r3, r3, #1
 800119c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d007      	beq.n	80011c2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011ce:	d106      	bne.n	80011de <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d4:	f023 0206 	bic.w	r2, r3, #6
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	645a      	str	r2, [r3, #68]	; 0x44
 80011dc:	e002      	b.n	80011e4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011ec:	4b31      	ldr	r3, [pc, #196]	; (80012b4 <HAL_ADC_Start+0x194>)
 80011ee:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011f8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 031f 	and.w	r3, r3, #31
 8001202:	2b00      	cmp	r3, #0
 8001204:	d12a      	bne.n	800125c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a2b      	ldr	r2, [pc, #172]	; (80012b8 <HAL_ADC_Start+0x198>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d015      	beq.n	800123c <HAL_ADC_Start+0x11c>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a29      	ldr	r2, [pc, #164]	; (80012bc <HAL_ADC_Start+0x19c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d105      	bne.n	8001226 <HAL_ADC_Start+0x106>
 800121a:	4b26      	ldr	r3, [pc, #152]	; (80012b4 <HAL_ADC_Start+0x194>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 031f 	and.w	r3, r3, #31
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00a      	beq.n	800123c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a25      	ldr	r2, [pc, #148]	; (80012c0 <HAL_ADC_Start+0x1a0>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d136      	bne.n	800129e <HAL_ADC_Start+0x17e>
 8001230:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <HAL_ADC_Start+0x194>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0310 	and.w	r3, r3, #16
 8001238:	2b00      	cmp	r3, #0
 800123a:	d130      	bne.n	800129e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d129      	bne.n	800129e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	e020      	b.n	800129e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a15      	ldr	r2, [pc, #84]	; (80012b8 <HAL_ADC_Start+0x198>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d11b      	bne.n	800129e <HAL_ADC_Start+0x17e>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d114      	bne.n	800129e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	e00b      	b.n	800129e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f043 0210 	orr.w	r2, r3, #16
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	f043 0201 	orr.w	r2, r3, #1
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	20000000 	.word	0x20000000
 80012b0:	431bde83 	.word	0x431bde83
 80012b4:	40012300 	.word	0x40012300
 80012b8:	40012000 	.word	0x40012000
 80012bc:	40012100 	.word	0x40012100
 80012c0:	40012200 	.word	0x40012200

080012c4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e0:	d113      	bne.n	800130a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012f0:	d10b      	bne.n	800130a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f043 0220 	orr.w	r2, r3, #32
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e063      	b.n	80013d2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800130a:	f7ff feb9 	bl	8001080 <HAL_GetTick>
 800130e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001310:	e021      	b.n	8001356 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001318:	d01d      	beq.n	8001356 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d007      	beq.n	8001330 <HAL_ADC_PollForConversion+0x6c>
 8001320:	f7ff feae 	bl	8001080 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	429a      	cmp	r2, r3
 800132e:	d212      	bcs.n	8001356 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b02      	cmp	r3, #2
 800133c:	d00b      	beq.n	8001356 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f043 0204 	orr.w	r2, r3, #4
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e03d      	b.n	80013d2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b02      	cmp	r3, #2
 8001362:	d1d6      	bne.n	8001312 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f06f 0212 	mvn.w	r2, #18
 800136c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d123      	bne.n	80013d0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800138c:	2b00      	cmp	r3, #0
 800138e:	d11f      	bne.n	80013d0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001396:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800139a:	2b00      	cmp	r3, #0
 800139c:	d006      	beq.n	80013ac <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d111      	bne.n	80013d0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d105      	bne.n	80013d0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	f043 0201 	orr.w	r2, r3, #1
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001408:	2b01      	cmp	r3, #1
 800140a:	d101      	bne.n	8001410 <HAL_ADC_ConfigChannel+0x1c>
 800140c:	2302      	movs	r3, #2
 800140e:	e105      	b.n	800161c <HAL_ADC_ConfigChannel+0x228>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2201      	movs	r2, #1
 8001414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b09      	cmp	r3, #9
 800141e:	d925      	bls.n	800146c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68d9      	ldr	r1, [r3, #12]
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	b29b      	uxth	r3, r3
 800142c:	461a      	mov	r2, r3
 800142e:	4613      	mov	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4413      	add	r3, r2
 8001434:	3b1e      	subs	r3, #30
 8001436:	2207      	movs	r2, #7
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43da      	mvns	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	400a      	ands	r2, r1
 8001444:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68d9      	ldr	r1, [r3, #12]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	b29b      	uxth	r3, r3
 8001456:	4618      	mov	r0, r3
 8001458:	4603      	mov	r3, r0
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4403      	add	r3, r0
 800145e:	3b1e      	subs	r3, #30
 8001460:	409a      	lsls	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	e022      	b.n	80014b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6919      	ldr	r1, [r3, #16]
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	b29b      	uxth	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	4613      	mov	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	2207      	movs	r2, #7
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43da      	mvns	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	400a      	ands	r2, r1
 800148e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6919      	ldr	r1, [r3, #16]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	4618      	mov	r0, r3
 80014a2:	4603      	mov	r3, r0
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	4403      	add	r3, r0
 80014a8:	409a      	lsls	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d824      	bhi.n	8001504 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	4613      	mov	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	3b05      	subs	r3, #5
 80014cc:	221f      	movs	r2, #31
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43da      	mvns	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	400a      	ands	r2, r1
 80014da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	4618      	mov	r0, r3
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	3b05      	subs	r3, #5
 80014f6:	fa00 f203 	lsl.w	r2, r0, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	635a      	str	r2, [r3, #52]	; 0x34
 8001502:	e04c      	b.n	800159e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b0c      	cmp	r3, #12
 800150a:	d824      	bhi.n	8001556 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	3b23      	subs	r3, #35	; 0x23
 800151e:	221f      	movs	r2, #31
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43da      	mvns	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	400a      	ands	r2, r1
 800152c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	b29b      	uxth	r3, r3
 800153a:	4618      	mov	r0, r3
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	4613      	mov	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	3b23      	subs	r3, #35	; 0x23
 8001548:	fa00 f203 	lsl.w	r2, r0, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	430a      	orrs	r2, r1
 8001552:	631a      	str	r2, [r3, #48]	; 0x30
 8001554:	e023      	b.n	800159e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	3b41      	subs	r3, #65	; 0x41
 8001568:	221f      	movs	r2, #31
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43da      	mvns	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	400a      	ands	r2, r1
 8001576:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	b29b      	uxth	r3, r3
 8001584:	4618      	mov	r0, r3
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	3b41      	subs	r3, #65	; 0x41
 8001592:	fa00 f203 	lsl.w	r2, r0, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	430a      	orrs	r2, r1
 800159c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800159e:	4b22      	ldr	r3, [pc, #136]	; (8001628 <HAL_ADC_ConfigChannel+0x234>)
 80015a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a21      	ldr	r2, [pc, #132]	; (800162c <HAL_ADC_ConfigChannel+0x238>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d109      	bne.n	80015c0 <HAL_ADC_ConfigChannel+0x1cc>
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b12      	cmp	r3, #18
 80015b2:	d105      	bne.n	80015c0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a19      	ldr	r2, [pc, #100]	; (800162c <HAL_ADC_ConfigChannel+0x238>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d123      	bne.n	8001612 <HAL_ADC_ConfigChannel+0x21e>
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b10      	cmp	r3, #16
 80015d0:	d003      	beq.n	80015da <HAL_ADC_ConfigChannel+0x1e6>
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2b11      	cmp	r3, #17
 80015d8:	d11b      	bne.n	8001612 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b10      	cmp	r3, #16
 80015ec:	d111      	bne.n	8001612 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <HAL_ADC_ConfigChannel+0x23c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a10      	ldr	r2, [pc, #64]	; (8001634 <HAL_ADC_ConfigChannel+0x240>)
 80015f4:	fba2 2303 	umull	r2, r3, r2, r3
 80015f8:	0c9a      	lsrs	r2, r3, #18
 80015fa:	4613      	mov	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001604:	e002      	b.n	800160c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	3b01      	subs	r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f9      	bne.n	8001606 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	40012300 	.word	0x40012300
 800162c:	40012000 	.word	0x40012000
 8001630:	20000000 	.word	0x20000000
 8001634:	431bde83 	.word	0x431bde83

08001638 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001640:	4b79      	ldr	r3, [pc, #484]	; (8001828 <ADC_Init+0x1f0>)
 8001642:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	431a      	orrs	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800166c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6859      	ldr	r1, [r3, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	021a      	lsls	r2, r3, #8
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001690:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6859      	ldr	r1, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689a      	ldr	r2, [r3, #8]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6899      	ldr	r1, [r3, #8]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68da      	ldr	r2, [r3, #12]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ca:	4a58      	ldr	r2, [pc, #352]	; (800182c <ADC_Init+0x1f4>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d022      	beq.n	8001716 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6899      	ldr	r1, [r3, #8]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001700:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6899      	ldr	r1, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	e00f      	b.n	8001736 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001724:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001734:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 0202 	bic.w	r2, r2, #2
 8001744:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6899      	ldr	r1, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	7e1b      	ldrb	r3, [r3, #24]
 8001750:	005a      	lsls	r2, r3, #1
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	430a      	orrs	r2, r1
 8001758:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d01b      	beq.n	800179c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001772:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001782:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6859      	ldr	r1, [r3, #4]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178e:	3b01      	subs	r3, #1
 8001790:	035a      	lsls	r2, r3, #13
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	e007      	b.n	80017ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	051a      	lsls	r2, r3, #20
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6899      	ldr	r1, [r3, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017ee:	025a      	lsls	r2, r3, #9
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001806:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6899      	ldr	r1, [r3, #8]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	029a      	lsls	r2, r3, #10
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	430a      	orrs	r2, r1
 800181a:	609a      	str	r2, [r3, #8]
}
 800181c:	bf00      	nop
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	40012300 	.word	0x40012300
 800182c:	0f000001 	.word	0x0f000001

08001830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <__NVIC_SetPriorityGrouping+0x44>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800184c:	4013      	ands	r3, r2
 800184e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001858:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800185c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001862:	4a04      	ldr	r2, [pc, #16]	; (8001874 <__NVIC_SetPriorityGrouping+0x44>)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	60d3      	str	r3, [r2, #12]
}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800187c:	4b04      	ldr	r3, [pc, #16]	; (8001890 <__NVIC_GetPriorityGrouping+0x18>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	0a1b      	lsrs	r3, r3, #8
 8001882:	f003 0307 	and.w	r3, r3, #7
}
 8001886:	4618      	mov	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	db0b      	blt.n	80018be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	f003 021f 	and.w	r2, r3, #31
 80018ac:	4907      	ldr	r1, [pc, #28]	; (80018cc <__NVIC_EnableIRQ+0x38>)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	095b      	lsrs	r3, r3, #5
 80018b4:	2001      	movs	r0, #1
 80018b6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000e100 	.word	0xe000e100

080018d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	6039      	str	r1, [r7, #0]
 80018da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	db0a      	blt.n	80018fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	490c      	ldr	r1, [pc, #48]	; (800191c <__NVIC_SetPriority+0x4c>)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	0112      	lsls	r2, r2, #4
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	440b      	add	r3, r1
 80018f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f8:	e00a      	b.n	8001910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4908      	ldr	r1, [pc, #32]	; (8001920 <__NVIC_SetPriority+0x50>)
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	3b04      	subs	r3, #4
 8001908:	0112      	lsls	r2, r2, #4
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	440b      	add	r3, r1
 800190e:	761a      	strb	r2, [r3, #24]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000e100 	.word	0xe000e100
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	; 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f1c3 0307 	rsb	r3, r3, #7
 800193e:	2b04      	cmp	r3, #4
 8001940:	bf28      	it	cs
 8001942:	2304      	movcs	r3, #4
 8001944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3304      	adds	r3, #4
 800194a:	2b06      	cmp	r3, #6
 800194c:	d902      	bls.n	8001954 <NVIC_EncodePriority+0x30>
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3b03      	subs	r3, #3
 8001952:	e000      	b.n	8001956 <NVIC_EncodePriority+0x32>
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43da      	mvns	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	401a      	ands	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800196c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	43d9      	mvns	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	4313      	orrs	r3, r2
         );
}
 800197e:	4618      	mov	r0, r3
 8001980:	3724      	adds	r7, #36	; 0x24
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3b01      	subs	r3, #1
 8001998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800199c:	d301      	bcc.n	80019a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800199e:	2301      	movs	r3, #1
 80019a0:	e00f      	b.n	80019c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a2:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <SysTick_Config+0x40>)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019aa:	210f      	movs	r1, #15
 80019ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019b0:	f7ff ff8e 	bl	80018d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <SysTick_Config+0x40>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ba:	4b04      	ldr	r3, [pc, #16]	; (80019cc <SysTick_Config+0x40>)
 80019bc:	2207      	movs	r2, #7
 80019be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	e000e010 	.word	0xe000e010

080019d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff ff29 	bl	8001830 <__NVIC_SetPriorityGrouping>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b086      	sub	sp, #24
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	4603      	mov	r3, r0
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
 80019f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019f8:	f7ff ff3e 	bl	8001878 <__NVIC_GetPriorityGrouping>
 80019fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	6978      	ldr	r0, [r7, #20]
 8001a04:	f7ff ff8e 	bl	8001924 <NVIC_EncodePriority>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff5d 	bl	80018d0 <__NVIC_SetPriority>
}
 8001a16:	bf00      	nop
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff31 	bl	8001894 <__NVIC_EnableIRQ>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ffa2 	bl	800198c <SysTick_Config>
 8001a48:	4603      	mov	r3, r0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b084      	sub	sp, #16
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a60:	f7ff fb0e 	bl	8001080 <HAL_GetTick>
 8001a64:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d008      	beq.n	8001a84 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2280      	movs	r2, #128	; 0x80
 8001a76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e052      	b.n	8001b2a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0216 	bic.w	r2, r2, #22
 8001a92:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	695a      	ldr	r2, [r3, #20]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001aa2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d103      	bne.n	8001ab4 <HAL_DMA_Abort+0x62>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d007      	beq.n	8001ac4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0208 	bic.w	r2, r2, #8
 8001ac2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0201 	bic.w	r2, r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ad4:	e013      	b.n	8001afe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ad6:	f7ff fad3 	bl	8001080 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b05      	cmp	r3, #5
 8001ae2:	d90c      	bls.n	8001afe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2203      	movs	r2, #3
 8001aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e015      	b.n	8001b2a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1e4      	bne.n	8001ad6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b10:	223f      	movs	r2, #63	; 0x3f
 8001b12:	409a      	lsls	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d004      	beq.n	8001b50 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2280      	movs	r2, #128	; 0x80
 8001b4a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e00c      	b.n	8001b6a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2205      	movs	r2, #5
 8001b54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 0201 	bic.w	r2, r2, #1
 8001b66:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b089      	sub	sp, #36	; 0x24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
 8001b92:	e16b      	b.n	8001e6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b94:	2201      	movs	r2, #1
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	f040 815a 	bne.w	8001e66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d005      	beq.n	8001bca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d130      	bne.n	8001c2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c00:	2201      	movs	r2, #1
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	f003 0201 	and.w	r2, r3, #1
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	2b03      	cmp	r3, #3
 8001c36:	d017      	beq.n	8001c68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	2203      	movs	r2, #3
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d123      	bne.n	8001cbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	08da      	lsrs	r2, r3, #3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3208      	adds	r2, #8
 8001c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	220f      	movs	r2, #15
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	691a      	ldr	r2, [r3, #16]
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	08da      	lsrs	r2, r3, #3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3208      	adds	r2, #8
 8001cb6:	69b9      	ldr	r1, [r7, #24]
 8001cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 0203 	and.w	r2, r3, #3
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80b4 	beq.w	8001e66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4b60      	ldr	r3, [pc, #384]	; (8001e84 <HAL_GPIO_Init+0x30c>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	4a5f      	ldr	r2, [pc, #380]	; (8001e84 <HAL_GPIO_Init+0x30c>)
 8001d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0e:	4b5d      	ldr	r3, [pc, #372]	; (8001e84 <HAL_GPIO_Init+0x30c>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d1a:	4a5b      	ldr	r2, [pc, #364]	; (8001e88 <HAL_GPIO_Init+0x310>)
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	089b      	lsrs	r3, r3, #2
 8001d20:	3302      	adds	r3, #2
 8001d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	220f      	movs	r2, #15
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a52      	ldr	r2, [pc, #328]	; (8001e8c <HAL_GPIO_Init+0x314>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d02b      	beq.n	8001d9e <HAL_GPIO_Init+0x226>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a51      	ldr	r2, [pc, #324]	; (8001e90 <HAL_GPIO_Init+0x318>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d025      	beq.n	8001d9a <HAL_GPIO_Init+0x222>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a50      	ldr	r2, [pc, #320]	; (8001e94 <HAL_GPIO_Init+0x31c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d01f      	beq.n	8001d96 <HAL_GPIO_Init+0x21e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a4f      	ldr	r2, [pc, #316]	; (8001e98 <HAL_GPIO_Init+0x320>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d019      	beq.n	8001d92 <HAL_GPIO_Init+0x21a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a4e      	ldr	r2, [pc, #312]	; (8001e9c <HAL_GPIO_Init+0x324>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d013      	beq.n	8001d8e <HAL_GPIO_Init+0x216>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a4d      	ldr	r2, [pc, #308]	; (8001ea0 <HAL_GPIO_Init+0x328>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d00d      	beq.n	8001d8a <HAL_GPIO_Init+0x212>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a4c      	ldr	r2, [pc, #304]	; (8001ea4 <HAL_GPIO_Init+0x32c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d007      	beq.n	8001d86 <HAL_GPIO_Init+0x20e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a4b      	ldr	r2, [pc, #300]	; (8001ea8 <HAL_GPIO_Init+0x330>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d101      	bne.n	8001d82 <HAL_GPIO_Init+0x20a>
 8001d7e:	2307      	movs	r3, #7
 8001d80:	e00e      	b.n	8001da0 <HAL_GPIO_Init+0x228>
 8001d82:	2308      	movs	r3, #8
 8001d84:	e00c      	b.n	8001da0 <HAL_GPIO_Init+0x228>
 8001d86:	2306      	movs	r3, #6
 8001d88:	e00a      	b.n	8001da0 <HAL_GPIO_Init+0x228>
 8001d8a:	2305      	movs	r3, #5
 8001d8c:	e008      	b.n	8001da0 <HAL_GPIO_Init+0x228>
 8001d8e:	2304      	movs	r3, #4
 8001d90:	e006      	b.n	8001da0 <HAL_GPIO_Init+0x228>
 8001d92:	2303      	movs	r3, #3
 8001d94:	e004      	b.n	8001da0 <HAL_GPIO_Init+0x228>
 8001d96:	2302      	movs	r3, #2
 8001d98:	e002      	b.n	8001da0 <HAL_GPIO_Init+0x228>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <HAL_GPIO_Init+0x228>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	69fa      	ldr	r2, [r7, #28]
 8001da2:	f002 0203 	and.w	r2, r2, #3
 8001da6:	0092      	lsls	r2, r2, #2
 8001da8:	4093      	lsls	r3, r2
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001db0:	4935      	ldr	r1, [pc, #212]	; (8001e88 <HAL_GPIO_Init+0x310>)
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	089b      	lsrs	r3, r3, #2
 8001db6:	3302      	adds	r3, #2
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dbe:	4b3b      	ldr	r3, [pc, #236]	; (8001eac <HAL_GPIO_Init+0x334>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001de2:	4a32      	ldr	r2, [pc, #200]	; (8001eac <HAL_GPIO_Init+0x334>)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001de8:	4b30      	ldr	r3, [pc, #192]	; (8001eac <HAL_GPIO_Init+0x334>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e0c:	4a27      	ldr	r2, [pc, #156]	; (8001eac <HAL_GPIO_Init+0x334>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e12:	4b26      	ldr	r3, [pc, #152]	; (8001eac <HAL_GPIO_Init+0x334>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e36:	4a1d      	ldr	r2, [pc, #116]	; (8001eac <HAL_GPIO_Init+0x334>)
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e3c:	4b1b      	ldr	r3, [pc, #108]	; (8001eac <HAL_GPIO_Init+0x334>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e60:	4a12      	ldr	r2, [pc, #72]	; (8001eac <HAL_GPIO_Init+0x334>)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	61fb      	str	r3, [r7, #28]
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	2b0f      	cmp	r3, #15
 8001e70:	f67f ae90 	bls.w	8001b94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	3724      	adds	r7, #36	; 0x24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40013800 	.word	0x40013800
 8001e8c:	40020000 	.word	0x40020000
 8001e90:	40020400 	.word	0x40020400
 8001e94:	40020800 	.word	0x40020800
 8001e98:	40020c00 	.word	0x40020c00
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	40021400 	.word	0x40021400
 8001ea4:	40021800 	.word	0x40021800
 8001ea8:	40021c00 	.word	0x40021c00
 8001eac:	40013c00 	.word	0x40013c00

08001eb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691a      	ldr	r2, [r3, #16]
 8001ec0:	887b      	ldrh	r3, [r7, #2]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d002      	beq.n	8001ece <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	73fb      	strb	r3, [r7, #15]
 8001ecc:	e001      	b.n	8001ed2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	807b      	strh	r3, [r7, #2]
 8001eec:	4613      	mov	r3, r2
 8001eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ef0:	787b      	ldrb	r3, [r7, #1]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ef6:	887a      	ldrh	r2, [r7, #2]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001efc:	e003      	b.n	8001f06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001efe:	887b      	ldrh	r3, [r7, #2]
 8001f00:	041a      	lsls	r2, r3, #16
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	619a      	str	r2, [r3, #24]
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
	...

08001f14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e267      	b.n	80023f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d075      	beq.n	800201e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f32:	4b88      	ldr	r3, [pc, #544]	; (8002154 <HAL_RCC_OscConfig+0x240>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d00c      	beq.n	8001f58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f3e:	4b85      	ldr	r3, [pc, #532]	; (8002154 <HAL_RCC_OscConfig+0x240>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d112      	bne.n	8001f70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f4a:	4b82      	ldr	r3, [pc, #520]	; (8002154 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f56:	d10b      	bne.n	8001f70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f58:	4b7e      	ldr	r3, [pc, #504]	; (8002154 <HAL_RCC_OscConfig+0x240>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d05b      	beq.n	800201c <HAL_RCC_OscConfig+0x108>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d157      	bne.n	800201c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e242      	b.n	80023f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f78:	d106      	bne.n	8001f88 <HAL_RCC_OscConfig+0x74>
 8001f7a:	4b76      	ldr	r3, [pc, #472]	; (8002154 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a75      	ldr	r2, [pc, #468]	; (8002154 <HAL_RCC_OscConfig+0x240>)
 8001f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	e01d      	b.n	8001fc4 <HAL_RCC_OscConfig+0xb0>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f90:	d10c      	bne.n	8001fac <HAL_RCC_OscConfig+0x98>
 8001f92:	4b70      	ldr	r3, [pc, #448]	; (8002154 <HAL_RCC_OscConfig+0x240>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a6f      	ldr	r2, [pc, #444]	; (8002154 <HAL_RCC_OscConfig+0x240>)
 8001f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	4b6d      	ldr	r3, [pc, #436]	; (8002154 <HAL_RCC_OscConfig+0x240>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a6c      	ldr	r2, [pc, #432]	; (8002154 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	e00b      	b.n	8001fc4 <HAL_RCC_OscConfig+0xb0>
 8001fac:	4b69      	ldr	r3, [pc, #420]	; (8002154 <HAL_RCC_OscConfig+0x240>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a68      	ldr	r2, [pc, #416]	; (8002154 <HAL_RCC_OscConfig+0x240>)
 8001fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	4b66      	ldr	r3, [pc, #408]	; (8002154 <HAL_RCC_OscConfig+0x240>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a65      	ldr	r2, [pc, #404]	; (8002154 <HAL_RCC_OscConfig+0x240>)
 8001fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d013      	beq.n	8001ff4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fcc:	f7ff f858 	bl	8001080 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fd4:	f7ff f854 	bl	8001080 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b64      	cmp	r3, #100	; 0x64
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e207      	b.n	80023f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe6:	4b5b      	ldr	r3, [pc, #364]	; (8002154 <HAL_RCC_OscConfig+0x240>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0f0      	beq.n	8001fd4 <HAL_RCC_OscConfig+0xc0>
 8001ff2:	e014      	b.n	800201e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7ff f844 	bl	8001080 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ffc:	f7ff f840 	bl	8001080 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b64      	cmp	r3, #100	; 0x64
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e1f3      	b.n	80023f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200e:	4b51      	ldr	r3, [pc, #324]	; (8002154 <HAL_RCC_OscConfig+0x240>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0xe8>
 800201a:	e000      	b.n	800201e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d063      	beq.n	80020f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800202a:	4b4a      	ldr	r3, [pc, #296]	; (8002154 <HAL_RCC_OscConfig+0x240>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00b      	beq.n	800204e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002036:	4b47      	ldr	r3, [pc, #284]	; (8002154 <HAL_RCC_OscConfig+0x240>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800203e:	2b08      	cmp	r3, #8
 8002040:	d11c      	bne.n	800207c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002042:	4b44      	ldr	r3, [pc, #272]	; (8002154 <HAL_RCC_OscConfig+0x240>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d116      	bne.n	800207c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204e:	4b41      	ldr	r3, [pc, #260]	; (8002154 <HAL_RCC_OscConfig+0x240>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d005      	beq.n	8002066 <HAL_RCC_OscConfig+0x152>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d001      	beq.n	8002066 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e1c7      	b.n	80023f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002066:	4b3b      	ldr	r3, [pc, #236]	; (8002154 <HAL_RCC_OscConfig+0x240>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4937      	ldr	r1, [pc, #220]	; (8002154 <HAL_RCC_OscConfig+0x240>)
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207a:	e03a      	b.n	80020f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d020      	beq.n	80020c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002084:	4b34      	ldr	r3, [pc, #208]	; (8002158 <HAL_RCC_OscConfig+0x244>)
 8002086:	2201      	movs	r2, #1
 8002088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208a:	f7fe fff9 	bl	8001080 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002092:	f7fe fff5 	bl	8001080 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e1a8      	b.n	80023f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a4:	4b2b      	ldr	r3, [pc, #172]	; (8002154 <HAL_RCC_OscConfig+0x240>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0f0      	beq.n	8002092 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b0:	4b28      	ldr	r3, [pc, #160]	; (8002154 <HAL_RCC_OscConfig+0x240>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	4925      	ldr	r1, [pc, #148]	; (8002154 <HAL_RCC_OscConfig+0x240>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	600b      	str	r3, [r1, #0]
 80020c4:	e015      	b.n	80020f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020c6:	4b24      	ldr	r3, [pc, #144]	; (8002158 <HAL_RCC_OscConfig+0x244>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020cc:	f7fe ffd8 	bl	8001080 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020d4:	f7fe ffd4 	bl	8001080 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e187      	b.n	80023f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e6:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <HAL_RCC_OscConfig+0x240>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d036      	beq.n	800216c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d016      	beq.n	8002134 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002106:	4b15      	ldr	r3, [pc, #84]	; (800215c <HAL_RCC_OscConfig+0x248>)
 8002108:	2201      	movs	r2, #1
 800210a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210c:	f7fe ffb8 	bl	8001080 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002114:	f7fe ffb4 	bl	8001080 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e167      	b.n	80023f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002126:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <HAL_RCC_OscConfig+0x240>)
 8002128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0f0      	beq.n	8002114 <HAL_RCC_OscConfig+0x200>
 8002132:	e01b      	b.n	800216c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <HAL_RCC_OscConfig+0x248>)
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213a:	f7fe ffa1 	bl	8001080 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002140:	e00e      	b.n	8002160 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002142:	f7fe ff9d 	bl	8001080 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d907      	bls.n	8002160 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e150      	b.n	80023f6 <HAL_RCC_OscConfig+0x4e2>
 8002154:	40023800 	.word	0x40023800
 8002158:	42470000 	.word	0x42470000
 800215c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002160:	4b88      	ldr	r3, [pc, #544]	; (8002384 <HAL_RCC_OscConfig+0x470>)
 8002162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1ea      	bne.n	8002142 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 8097 	beq.w	80022a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800217a:	2300      	movs	r3, #0
 800217c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800217e:	4b81      	ldr	r3, [pc, #516]	; (8002384 <HAL_RCC_OscConfig+0x470>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10f      	bne.n	80021aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	4b7d      	ldr	r3, [pc, #500]	; (8002384 <HAL_RCC_OscConfig+0x470>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	4a7c      	ldr	r2, [pc, #496]	; (8002384 <HAL_RCC_OscConfig+0x470>)
 8002194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002198:	6413      	str	r3, [r2, #64]	; 0x40
 800219a:	4b7a      	ldr	r3, [pc, #488]	; (8002384 <HAL_RCC_OscConfig+0x470>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a6:	2301      	movs	r3, #1
 80021a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021aa:	4b77      	ldr	r3, [pc, #476]	; (8002388 <HAL_RCC_OscConfig+0x474>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d118      	bne.n	80021e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021b6:	4b74      	ldr	r3, [pc, #464]	; (8002388 <HAL_RCC_OscConfig+0x474>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a73      	ldr	r2, [pc, #460]	; (8002388 <HAL_RCC_OscConfig+0x474>)
 80021bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021c2:	f7fe ff5d 	bl	8001080 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ca:	f7fe ff59 	bl	8001080 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e10c      	b.n	80023f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021dc:	4b6a      	ldr	r3, [pc, #424]	; (8002388 <HAL_RCC_OscConfig+0x474>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0f0      	beq.n	80021ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d106      	bne.n	80021fe <HAL_RCC_OscConfig+0x2ea>
 80021f0:	4b64      	ldr	r3, [pc, #400]	; (8002384 <HAL_RCC_OscConfig+0x470>)
 80021f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f4:	4a63      	ldr	r2, [pc, #396]	; (8002384 <HAL_RCC_OscConfig+0x470>)
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	6713      	str	r3, [r2, #112]	; 0x70
 80021fc:	e01c      	b.n	8002238 <HAL_RCC_OscConfig+0x324>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	2b05      	cmp	r3, #5
 8002204:	d10c      	bne.n	8002220 <HAL_RCC_OscConfig+0x30c>
 8002206:	4b5f      	ldr	r3, [pc, #380]	; (8002384 <HAL_RCC_OscConfig+0x470>)
 8002208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220a:	4a5e      	ldr	r2, [pc, #376]	; (8002384 <HAL_RCC_OscConfig+0x470>)
 800220c:	f043 0304 	orr.w	r3, r3, #4
 8002210:	6713      	str	r3, [r2, #112]	; 0x70
 8002212:	4b5c      	ldr	r3, [pc, #368]	; (8002384 <HAL_RCC_OscConfig+0x470>)
 8002214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002216:	4a5b      	ldr	r2, [pc, #364]	; (8002384 <HAL_RCC_OscConfig+0x470>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	6713      	str	r3, [r2, #112]	; 0x70
 800221e:	e00b      	b.n	8002238 <HAL_RCC_OscConfig+0x324>
 8002220:	4b58      	ldr	r3, [pc, #352]	; (8002384 <HAL_RCC_OscConfig+0x470>)
 8002222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002224:	4a57      	ldr	r2, [pc, #348]	; (8002384 <HAL_RCC_OscConfig+0x470>)
 8002226:	f023 0301 	bic.w	r3, r3, #1
 800222a:	6713      	str	r3, [r2, #112]	; 0x70
 800222c:	4b55      	ldr	r3, [pc, #340]	; (8002384 <HAL_RCC_OscConfig+0x470>)
 800222e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002230:	4a54      	ldr	r2, [pc, #336]	; (8002384 <HAL_RCC_OscConfig+0x470>)
 8002232:	f023 0304 	bic.w	r3, r3, #4
 8002236:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d015      	beq.n	800226c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002240:	f7fe ff1e 	bl	8001080 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002246:	e00a      	b.n	800225e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002248:	f7fe ff1a 	bl	8001080 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	f241 3288 	movw	r2, #5000	; 0x1388
 8002256:	4293      	cmp	r3, r2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e0cb      	b.n	80023f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225e:	4b49      	ldr	r3, [pc, #292]	; (8002384 <HAL_RCC_OscConfig+0x470>)
 8002260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0ee      	beq.n	8002248 <HAL_RCC_OscConfig+0x334>
 800226a:	e014      	b.n	8002296 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226c:	f7fe ff08 	bl	8001080 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002272:	e00a      	b.n	800228a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002274:	f7fe ff04 	bl	8001080 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002282:	4293      	cmp	r3, r2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e0b5      	b.n	80023f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800228a:	4b3e      	ldr	r3, [pc, #248]	; (8002384 <HAL_RCC_OscConfig+0x470>)
 800228c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1ee      	bne.n	8002274 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002296:	7dfb      	ldrb	r3, [r7, #23]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d105      	bne.n	80022a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800229c:	4b39      	ldr	r3, [pc, #228]	; (8002384 <HAL_RCC_OscConfig+0x470>)
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	4a38      	ldr	r2, [pc, #224]	; (8002384 <HAL_RCC_OscConfig+0x470>)
 80022a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 80a1 	beq.w	80023f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022b2:	4b34      	ldr	r3, [pc, #208]	; (8002384 <HAL_RCC_OscConfig+0x470>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 030c 	and.w	r3, r3, #12
 80022ba:	2b08      	cmp	r3, #8
 80022bc:	d05c      	beq.n	8002378 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d141      	bne.n	800234a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c6:	4b31      	ldr	r3, [pc, #196]	; (800238c <HAL_RCC_OscConfig+0x478>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022cc:	f7fe fed8 	bl	8001080 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d4:	f7fe fed4 	bl	8001080 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e087      	b.n	80023f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e6:	4b27      	ldr	r3, [pc, #156]	; (8002384 <HAL_RCC_OscConfig+0x470>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69da      	ldr	r2, [r3, #28]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	019b      	lsls	r3, r3, #6
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002308:	085b      	lsrs	r3, r3, #1
 800230a:	3b01      	subs	r3, #1
 800230c:	041b      	lsls	r3, r3, #16
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002314:	061b      	lsls	r3, r3, #24
 8002316:	491b      	ldr	r1, [pc, #108]	; (8002384 <HAL_RCC_OscConfig+0x470>)
 8002318:	4313      	orrs	r3, r2
 800231a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800231c:	4b1b      	ldr	r3, [pc, #108]	; (800238c <HAL_RCC_OscConfig+0x478>)
 800231e:	2201      	movs	r2, #1
 8002320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002322:	f7fe fead 	bl	8001080 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800232a:	f7fe fea9 	bl	8001080 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e05c      	b.n	80023f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <HAL_RCC_OscConfig+0x470>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f0      	beq.n	800232a <HAL_RCC_OscConfig+0x416>
 8002348:	e054      	b.n	80023f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234a:	4b10      	ldr	r3, [pc, #64]	; (800238c <HAL_RCC_OscConfig+0x478>)
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002350:	f7fe fe96 	bl	8001080 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002358:	f7fe fe92 	bl	8001080 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e045      	b.n	80023f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800236a:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_RCC_OscConfig+0x470>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f0      	bne.n	8002358 <HAL_RCC_OscConfig+0x444>
 8002376:	e03d      	b.n	80023f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d107      	bne.n	8002390 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e038      	b.n	80023f6 <HAL_RCC_OscConfig+0x4e2>
 8002384:	40023800 	.word	0x40023800
 8002388:	40007000 	.word	0x40007000
 800238c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002390:	4b1b      	ldr	r3, [pc, #108]	; (8002400 <HAL_RCC_OscConfig+0x4ec>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d028      	beq.n	80023f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d121      	bne.n	80023f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d11a      	bne.n	80023f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023c0:	4013      	ands	r3, r2
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d111      	bne.n	80023f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d6:	085b      	lsrs	r3, r3, #1
 80023d8:	3b01      	subs	r3, #1
 80023da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023dc:	429a      	cmp	r2, r3
 80023de:	d107      	bne.n	80023f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d001      	beq.n	80023f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e000      	b.n	80023f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40023800 	.word	0x40023800

08002404 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0cc      	b.n	80025b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002418:	4b68      	ldr	r3, [pc, #416]	; (80025bc <HAL_RCC_ClockConfig+0x1b8>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d90c      	bls.n	8002440 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002426:	4b65      	ldr	r3, [pc, #404]	; (80025bc <HAL_RCC_ClockConfig+0x1b8>)
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800242e:	4b63      	ldr	r3, [pc, #396]	; (80025bc <HAL_RCC_ClockConfig+0x1b8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d001      	beq.n	8002440 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e0b8      	b.n	80025b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d020      	beq.n	800248e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002458:	4b59      	ldr	r3, [pc, #356]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	4a58      	ldr	r2, [pc, #352]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002462:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002470:	4b53      	ldr	r3, [pc, #332]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	4a52      	ldr	r2, [pc, #328]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800247a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800247c:	4b50      	ldr	r3, [pc, #320]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	494d      	ldr	r1, [pc, #308]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	4313      	orrs	r3, r2
 800248c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d044      	beq.n	8002524 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d107      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a2:	4b47      	ldr	r3, [pc, #284]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d119      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e07f      	b.n	80025b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d003      	beq.n	80024c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024be:	2b03      	cmp	r3, #3
 80024c0:	d107      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c2:	4b3f      	ldr	r3, [pc, #252]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d109      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e06f      	b.n	80025b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d2:	4b3b      	ldr	r3, [pc, #236]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e067      	b.n	80025b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024e2:	4b37      	ldr	r3, [pc, #220]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f023 0203 	bic.w	r2, r3, #3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	4934      	ldr	r1, [pc, #208]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024f4:	f7fe fdc4 	bl	8001080 <HAL_GetTick>
 80024f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fa:	e00a      	b.n	8002512 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024fc:	f7fe fdc0 	bl	8001080 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	f241 3288 	movw	r2, #5000	; 0x1388
 800250a:	4293      	cmp	r3, r2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e04f      	b.n	80025b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002512:	4b2b      	ldr	r3, [pc, #172]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 020c 	and.w	r2, r3, #12
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	429a      	cmp	r2, r3
 8002522:	d1eb      	bne.n	80024fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002524:	4b25      	ldr	r3, [pc, #148]	; (80025bc <HAL_RCC_ClockConfig+0x1b8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d20c      	bcs.n	800254c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002532:	4b22      	ldr	r3, [pc, #136]	; (80025bc <HAL_RCC_ClockConfig+0x1b8>)
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800253a:	4b20      	ldr	r3, [pc, #128]	; (80025bc <HAL_RCC_ClockConfig+0x1b8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d001      	beq.n	800254c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e032      	b.n	80025b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b00      	cmp	r3, #0
 8002556:	d008      	beq.n	800256a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002558:	4b19      	ldr	r3, [pc, #100]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	4916      	ldr	r1, [pc, #88]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	4313      	orrs	r3, r2
 8002568:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b00      	cmp	r3, #0
 8002574:	d009      	beq.n	800258a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002576:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	490e      	ldr	r1, [pc, #56]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	4313      	orrs	r3, r2
 8002588:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800258a:	f000 f821 	bl	80025d0 <HAL_RCC_GetSysClockFreq>
 800258e:	4602      	mov	r2, r0
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	091b      	lsrs	r3, r3, #4
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	490a      	ldr	r1, [pc, #40]	; (80025c4 <HAL_RCC_ClockConfig+0x1c0>)
 800259c:	5ccb      	ldrb	r3, [r1, r3]
 800259e:	fa22 f303 	lsr.w	r3, r2, r3
 80025a2:	4a09      	ldr	r2, [pc, #36]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 80025a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025a6:	4b09      	ldr	r3, [pc, #36]	; (80025cc <HAL_RCC_ClockConfig+0x1c8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fe fd24 	bl	8000ff8 <HAL_InitTick>

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40023c00 	.word	0x40023c00
 80025c0:	40023800 	.word	0x40023800
 80025c4:	080039a4 	.word	0x080039a4
 80025c8:	20000000 	.word	0x20000000
 80025cc:	20000004 	.word	0x20000004

080025d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025d4:	b094      	sub	sp, #80	; 0x50
 80025d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	647b      	str	r3, [r7, #68]	; 0x44
 80025dc:	2300      	movs	r3, #0
 80025de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025e0:	2300      	movs	r3, #0
 80025e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025e8:	4b79      	ldr	r3, [pc, #484]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f003 030c 	and.w	r3, r3, #12
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d00d      	beq.n	8002610 <HAL_RCC_GetSysClockFreq+0x40>
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	f200 80e1 	bhi.w	80027bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d002      	beq.n	8002604 <HAL_RCC_GetSysClockFreq+0x34>
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d003      	beq.n	800260a <HAL_RCC_GetSysClockFreq+0x3a>
 8002602:	e0db      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002604:	4b73      	ldr	r3, [pc, #460]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002606:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002608:	e0db      	b.n	80027c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800260a:	4b73      	ldr	r3, [pc, #460]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800260c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800260e:	e0d8      	b.n	80027c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002610:	4b6f      	ldr	r3, [pc, #444]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002618:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800261a:	4b6d      	ldr	r3, [pc, #436]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d063      	beq.n	80026ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002626:	4b6a      	ldr	r3, [pc, #424]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	099b      	lsrs	r3, r3, #6
 800262c:	2200      	movs	r2, #0
 800262e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002630:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002638:	633b      	str	r3, [r7, #48]	; 0x30
 800263a:	2300      	movs	r3, #0
 800263c:	637b      	str	r3, [r7, #52]	; 0x34
 800263e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002642:	4622      	mov	r2, r4
 8002644:	462b      	mov	r3, r5
 8002646:	f04f 0000 	mov.w	r0, #0
 800264a:	f04f 0100 	mov.w	r1, #0
 800264e:	0159      	lsls	r1, r3, #5
 8002650:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002654:	0150      	lsls	r0, r2, #5
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	4621      	mov	r1, r4
 800265c:	1a51      	subs	r1, r2, r1
 800265e:	6139      	str	r1, [r7, #16]
 8002660:	4629      	mov	r1, r5
 8002662:	eb63 0301 	sbc.w	r3, r3, r1
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	f04f 0300 	mov.w	r3, #0
 8002670:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002674:	4659      	mov	r1, fp
 8002676:	018b      	lsls	r3, r1, #6
 8002678:	4651      	mov	r1, sl
 800267a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800267e:	4651      	mov	r1, sl
 8002680:	018a      	lsls	r2, r1, #6
 8002682:	4651      	mov	r1, sl
 8002684:	ebb2 0801 	subs.w	r8, r2, r1
 8002688:	4659      	mov	r1, fp
 800268a:	eb63 0901 	sbc.w	r9, r3, r1
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	f04f 0300 	mov.w	r3, #0
 8002696:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800269a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800269e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026a2:	4690      	mov	r8, r2
 80026a4:	4699      	mov	r9, r3
 80026a6:	4623      	mov	r3, r4
 80026a8:	eb18 0303 	adds.w	r3, r8, r3
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	462b      	mov	r3, r5
 80026b0:	eb49 0303 	adc.w	r3, r9, r3
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	f04f 0300 	mov.w	r3, #0
 80026be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026c2:	4629      	mov	r1, r5
 80026c4:	024b      	lsls	r3, r1, #9
 80026c6:	4621      	mov	r1, r4
 80026c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026cc:	4621      	mov	r1, r4
 80026ce:	024a      	lsls	r2, r1, #9
 80026d0:	4610      	mov	r0, r2
 80026d2:	4619      	mov	r1, r3
 80026d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026d6:	2200      	movs	r2, #0
 80026d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80026da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026e0:	f7fd fd72 	bl	80001c8 <__aeabi_uldivmod>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4613      	mov	r3, r2
 80026ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026ec:	e058      	b.n	80027a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ee:	4b38      	ldr	r3, [pc, #224]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	099b      	lsrs	r3, r3, #6
 80026f4:	2200      	movs	r2, #0
 80026f6:	4618      	mov	r0, r3
 80026f8:	4611      	mov	r1, r2
 80026fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026fe:	623b      	str	r3, [r7, #32]
 8002700:	2300      	movs	r3, #0
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
 8002704:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002708:	4642      	mov	r2, r8
 800270a:	464b      	mov	r3, r9
 800270c:	f04f 0000 	mov.w	r0, #0
 8002710:	f04f 0100 	mov.w	r1, #0
 8002714:	0159      	lsls	r1, r3, #5
 8002716:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800271a:	0150      	lsls	r0, r2, #5
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4641      	mov	r1, r8
 8002722:	ebb2 0a01 	subs.w	sl, r2, r1
 8002726:	4649      	mov	r1, r9
 8002728:	eb63 0b01 	sbc.w	fp, r3, r1
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002738:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800273c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002740:	ebb2 040a 	subs.w	r4, r2, sl
 8002744:	eb63 050b 	sbc.w	r5, r3, fp
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	f04f 0300 	mov.w	r3, #0
 8002750:	00eb      	lsls	r3, r5, #3
 8002752:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002756:	00e2      	lsls	r2, r4, #3
 8002758:	4614      	mov	r4, r2
 800275a:	461d      	mov	r5, r3
 800275c:	4643      	mov	r3, r8
 800275e:	18e3      	adds	r3, r4, r3
 8002760:	603b      	str	r3, [r7, #0]
 8002762:	464b      	mov	r3, r9
 8002764:	eb45 0303 	adc.w	r3, r5, r3
 8002768:	607b      	str	r3, [r7, #4]
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	f04f 0300 	mov.w	r3, #0
 8002772:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002776:	4629      	mov	r1, r5
 8002778:	028b      	lsls	r3, r1, #10
 800277a:	4621      	mov	r1, r4
 800277c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002780:	4621      	mov	r1, r4
 8002782:	028a      	lsls	r2, r1, #10
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
 8002788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800278a:	2200      	movs	r2, #0
 800278c:	61bb      	str	r3, [r7, #24]
 800278e:	61fa      	str	r2, [r7, #28]
 8002790:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002794:	f7fd fd18 	bl	80001c8 <__aeabi_uldivmod>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	4613      	mov	r3, r2
 800279e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027a0:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	0c1b      	lsrs	r3, r3, #16
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	3301      	adds	r3, #1
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80027b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027ba:	e002      	b.n	80027c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027bc:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80027be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3750      	adds	r7, #80	; 0x50
 80027c8:	46bd      	mov	sp, r7
 80027ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027ce:	bf00      	nop
 80027d0:	40023800 	.word	0x40023800
 80027d4:	00f42400 	.word	0x00f42400
 80027d8:	007a1200 	.word	0x007a1200

080027dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027e0:	4b03      	ldr	r3, [pc, #12]	; (80027f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027e2:	681b      	ldr	r3, [r3, #0]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	20000000 	.word	0x20000000

080027f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027f8:	f7ff fff0 	bl	80027dc <HAL_RCC_GetHCLKFreq>
 80027fc:	4602      	mov	r2, r0
 80027fe:	4b05      	ldr	r3, [pc, #20]	; (8002814 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	0a9b      	lsrs	r3, r3, #10
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	4903      	ldr	r1, [pc, #12]	; (8002818 <HAL_RCC_GetPCLK1Freq+0x24>)
 800280a:	5ccb      	ldrb	r3, [r1, r3]
 800280c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002810:	4618      	mov	r0, r3
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40023800 	.word	0x40023800
 8002818:	080039b4 	.word	0x080039b4

0800281c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002820:	f7ff ffdc 	bl	80027dc <HAL_RCC_GetHCLKFreq>
 8002824:	4602      	mov	r2, r0
 8002826:	4b05      	ldr	r3, [pc, #20]	; (800283c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	0b5b      	lsrs	r3, r3, #13
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	4903      	ldr	r1, [pc, #12]	; (8002840 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002832:	5ccb      	ldrb	r3, [r1, r3]
 8002834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002838:	4618      	mov	r0, r3
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40023800 	.word	0x40023800
 8002840:	080039b4 	.word	0x080039b4

08002844 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e03f      	b.n	80028d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7fe fa7a 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2224      	movs	r2, #36	; 0x24
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002886:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 fddf 	bl	800344c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800289c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	695a      	ldr	r2, [r3, #20]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68da      	ldr	r2, [r3, #12]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2220      	movs	r2, #32
 80028d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b08a      	sub	sp, #40	; 0x28
 80028e2:	af02      	add	r7, sp, #8
 80028e4:	60f8      	str	r0, [r7, #12]
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	603b      	str	r3, [r7, #0]
 80028ea:	4613      	mov	r3, r2
 80028ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b20      	cmp	r3, #32
 80028fc:	d17c      	bne.n	80029f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d002      	beq.n	800290a <HAL_UART_Transmit+0x2c>
 8002904:	88fb      	ldrh	r3, [r7, #6]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e075      	b.n	80029fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_UART_Transmit+0x3e>
 8002918:	2302      	movs	r3, #2
 800291a:	e06e      	b.n	80029fa <HAL_UART_Transmit+0x11c>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2221      	movs	r2, #33	; 0x21
 800292e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002932:	f7fe fba5 	bl	8001080 <HAL_GetTick>
 8002936:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	88fa      	ldrh	r2, [r7, #6]
 800293c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	88fa      	ldrh	r2, [r7, #6]
 8002942:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800294c:	d108      	bne.n	8002960 <HAL_UART_Transmit+0x82>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d104      	bne.n	8002960 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002956:	2300      	movs	r3, #0
 8002958:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	61bb      	str	r3, [r7, #24]
 800295e:	e003      	b.n	8002968 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002964:	2300      	movs	r3, #0
 8002966:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002970:	e02a      	b.n	80029c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2200      	movs	r2, #0
 800297a:	2180      	movs	r1, #128	; 0x80
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 fb1f 	bl	8002fc0 <UART_WaitOnFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e036      	b.n	80029fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10b      	bne.n	80029aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	3302      	adds	r3, #2
 80029a6:	61bb      	str	r3, [r7, #24]
 80029a8:	e007      	b.n	80029ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	781a      	ldrb	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	3301      	adds	r3, #1
 80029b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029be:	b29b      	uxth	r3, r3
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1cf      	bne.n	8002972 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2200      	movs	r2, #0
 80029da:	2140      	movs	r1, #64	; 0x40
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 faef 	bl	8002fc0 <UART_WaitOnFlagUntilTimeout>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e006      	b.n	80029fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2220      	movs	r2, #32
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	e000      	b.n	80029fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80029f8:	2302      	movs	r3, #2
  }
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3720      	adds	r7, #32
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b084      	sub	sp, #16
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	d11d      	bne.n	8002a58 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <HAL_UART_Receive_IT+0x26>
 8002a22:	88fb      	ldrh	r3, [r7, #6]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e016      	b.n	8002a5a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_UART_Receive_IT+0x38>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e00f      	b.n	8002a5a <HAL_UART_Receive_IT+0x58>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a48:	88fb      	ldrh	r3, [r7, #6]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68b9      	ldr	r1, [r7, #8]
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 fb24 	bl	800309c <UART_Start_Receive_IT>
 8002a54:	4603      	mov	r3, r0
 8002a56:	e000      	b.n	8002a5a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002a58:	2302      	movs	r3, #2
  }
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b0ba      	sub	sp, #232	; 0xe8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002aa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10f      	bne.n	8002aca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aae:	f003 0320 	and.w	r3, r3, #32
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d009      	beq.n	8002aca <HAL_UART_IRQHandler+0x66>
 8002ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aba:	f003 0320 	and.w	r3, r3, #32
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 fc07 	bl	80032d6 <UART_Receive_IT>
      return;
 8002ac8:	e256      	b.n	8002f78 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002aca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 80de 	beq.w	8002c90 <HAL_UART_IRQHandler+0x22c>
 8002ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d106      	bne.n	8002aee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ae4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 80d1 	beq.w	8002c90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00b      	beq.n	8002b12 <HAL_UART_IRQHandler+0xae>
 8002afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d005      	beq.n	8002b12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f043 0201 	orr.w	r2, r3, #1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00b      	beq.n	8002b36 <HAL_UART_IRQHandler+0xd2>
 8002b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d005      	beq.n	8002b36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f043 0202 	orr.w	r2, r3, #2
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00b      	beq.n	8002b5a <HAL_UART_IRQHandler+0xf6>
 8002b42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d005      	beq.n	8002b5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	f043 0204 	orr.w	r2, r3, #4
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d011      	beq.n	8002b8a <HAL_UART_IRQHandler+0x126>
 8002b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d105      	bne.n	8002b7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d005      	beq.n	8002b8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f043 0208 	orr.w	r2, r3, #8
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 81ed 	beq.w	8002f6e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b98:	f003 0320 	and.w	r3, r3, #32
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_UART_IRQHandler+0x14e>
 8002ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d002      	beq.n	8002bb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 fb92 	bl	80032d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbc:	2b40      	cmp	r3, #64	; 0x40
 8002bbe:	bf0c      	ite	eq
 8002bc0:	2301      	moveq	r3, #1
 8002bc2:	2300      	movne	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d103      	bne.n	8002bde <HAL_UART_IRQHandler+0x17a>
 8002bd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d04f      	beq.n	8002c7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 fa9a 	bl	8003118 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bee:	2b40      	cmp	r3, #64	; 0x40
 8002bf0:	d141      	bne.n	8002c76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	3314      	adds	r3, #20
 8002bf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c00:	e853 3f00 	ldrex	r3, [r3]
 8002c04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	3314      	adds	r3, #20
 8002c1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c2e:	e841 2300 	strex	r3, r2, [r1]
 8002c32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1d9      	bne.n	8002bf2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d013      	beq.n	8002c6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4a:	4a7d      	ldr	r2, [pc, #500]	; (8002e40 <HAL_UART_IRQHandler+0x3dc>)
 8002c4c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fe ff6d 	bl	8001b32 <HAL_DMA_Abort_IT>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d016      	beq.n	8002c8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c68:	4610      	mov	r0, r2
 8002c6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c6c:	e00e      	b.n	8002c8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f990 	bl	8002f94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c74:	e00a      	b.n	8002c8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f98c 	bl	8002f94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c7c:	e006      	b.n	8002c8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f988 	bl	8002f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002c8a:	e170      	b.n	8002f6e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c8c:	bf00      	nop
    return;
 8002c8e:	e16e      	b.n	8002f6e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	f040 814a 	bne.w	8002f2e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c9e:	f003 0310 	and.w	r3, r3, #16
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 8143 	beq.w	8002f2e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cac:	f003 0310 	and.w	r3, r3, #16
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 813c 	beq.w	8002f2e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd6:	2b40      	cmp	r3, #64	; 0x40
 8002cd8:	f040 80b4 	bne.w	8002e44 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ce8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 8140 	beq.w	8002f72 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	f080 8139 	bcs.w	8002f72 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d06:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d12:	f000 8088 	beq.w	8002e26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	330c      	adds	r3, #12
 8002d1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d24:	e853 3f00 	ldrex	r3, [r3]
 8002d28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	330c      	adds	r3, #12
 8002d3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002d42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d52:	e841 2300 	strex	r3, r2, [r1]
 8002d56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1d9      	bne.n	8002d16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	3314      	adds	r3, #20
 8002d68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d6c:	e853 3f00 	ldrex	r3, [r3]
 8002d70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d74:	f023 0301 	bic.w	r3, r3, #1
 8002d78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	3314      	adds	r3, #20
 8002d82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d92:	e841 2300 	strex	r3, r2, [r1]
 8002d96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1e1      	bne.n	8002d62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	3314      	adds	r3, #20
 8002da4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002da8:	e853 3f00 	ldrex	r3, [r3]
 8002dac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002db4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	3314      	adds	r3, #20
 8002dbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002dc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002dc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002dc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002dca:	e841 2300 	strex	r3, r2, [r1]
 8002dce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002dd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1e3      	bne.n	8002d9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	330c      	adds	r3, #12
 8002dea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dee:	e853 3f00 	ldrex	r3, [r3]
 8002df2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df6:	f023 0310 	bic.w	r3, r3, #16
 8002dfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	330c      	adds	r3, #12
 8002e04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e08:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e0a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e10:	e841 2300 	strex	r3, r2, [r1]
 8002e14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1e3      	bne.n	8002de4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fe fe16 	bl	8001a52 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	4619      	mov	r1, r3
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f8b6 	bl	8002fa8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e3c:	e099      	b.n	8002f72 <HAL_UART_IRQHandler+0x50e>
 8002e3e:	bf00      	nop
 8002e40:	080031df 	.word	0x080031df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 808b 	beq.w	8002f76 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002e60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 8086 	beq.w	8002f76 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	330c      	adds	r3, #12
 8002e70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e74:	e853 3f00 	ldrex	r3, [r3]
 8002e78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	330c      	adds	r3, #12
 8002e8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002e8e:	647a      	str	r2, [r7, #68]	; 0x44
 8002e90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e96:	e841 2300 	strex	r3, r2, [r1]
 8002e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1e3      	bne.n	8002e6a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	3314      	adds	r3, #20
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	e853 3f00 	ldrex	r3, [r3]
 8002eb0:	623b      	str	r3, [r7, #32]
   return(result);
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	f023 0301 	bic.w	r3, r3, #1
 8002eb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	3314      	adds	r3, #20
 8002ec2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ec6:	633a      	str	r2, [r7, #48]	; 0x30
 8002ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ece:	e841 2300 	strex	r3, r2, [r1]
 8002ed2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1e3      	bne.n	8002ea2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2220      	movs	r2, #32
 8002ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	330c      	adds	r3, #12
 8002eee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	e853 3f00 	ldrex	r3, [r3]
 8002ef6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f023 0310 	bic.w	r3, r3, #16
 8002efe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	330c      	adds	r3, #12
 8002f08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002f0c:	61fa      	str	r2, [r7, #28]
 8002f0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f10:	69b9      	ldr	r1, [r7, #24]
 8002f12:	69fa      	ldr	r2, [r7, #28]
 8002f14:	e841 2300 	strex	r3, r2, [r1]
 8002f18:	617b      	str	r3, [r7, #20]
   return(result);
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1e3      	bne.n	8002ee8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f24:	4619      	mov	r1, r3
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f83e 	bl	8002fa8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f2c:	e023      	b.n	8002f76 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d009      	beq.n	8002f4e <HAL_UART_IRQHandler+0x4ea>
 8002f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f95d 	bl	8003206 <UART_Transmit_IT>
    return;
 8002f4c:	e014      	b.n	8002f78 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00e      	beq.n	8002f78 <HAL_UART_IRQHandler+0x514>
 8002f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d008      	beq.n	8002f78 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f99d 	bl	80032a6 <UART_EndTransmit_IT>
    return;
 8002f6c:	e004      	b.n	8002f78 <HAL_UART_IRQHandler+0x514>
    return;
 8002f6e:	bf00      	nop
 8002f70:	e002      	b.n	8002f78 <HAL_UART_IRQHandler+0x514>
      return;
 8002f72:	bf00      	nop
 8002f74:	e000      	b.n	8002f78 <HAL_UART_IRQHandler+0x514>
      return;
 8002f76:	bf00      	nop
  }
}
 8002f78:	37e8      	adds	r7, #232	; 0xe8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop

08002f80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b090      	sub	sp, #64	; 0x40
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fd0:	e050      	b.n	8003074 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fd8:	d04c      	beq.n	8003074 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d007      	beq.n	8002ff0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fe0:	f7fe f84e 	bl	8001080 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d241      	bcs.n	8003074 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	330c      	adds	r3, #12
 8002ff6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffa:	e853 3f00 	ldrex	r3, [r3]
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003006:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	330c      	adds	r3, #12
 800300e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003010:	637a      	str	r2, [r7, #52]	; 0x34
 8003012:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003014:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003016:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003018:	e841 2300 	strex	r3, r2, [r1]
 800301c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800301e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1e5      	bne.n	8002ff0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3314      	adds	r3, #20
 800302a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	e853 3f00 	ldrex	r3, [r3]
 8003032:	613b      	str	r3, [r7, #16]
   return(result);
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f023 0301 	bic.w	r3, r3, #1
 800303a:	63bb      	str	r3, [r7, #56]	; 0x38
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3314      	adds	r3, #20
 8003042:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003044:	623a      	str	r2, [r7, #32]
 8003046:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003048:	69f9      	ldr	r1, [r7, #28]
 800304a:	6a3a      	ldr	r2, [r7, #32]
 800304c:	e841 2300 	strex	r3, r2, [r1]
 8003050:	61bb      	str	r3, [r7, #24]
   return(result);
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1e5      	bne.n	8003024 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e00f      	b.n	8003094 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	4013      	ands	r3, r2
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	429a      	cmp	r2, r3
 8003082:	bf0c      	ite	eq
 8003084:	2301      	moveq	r3, #1
 8003086:	2300      	movne	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	461a      	mov	r2, r3
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	429a      	cmp	r2, r3
 8003090:	d09f      	beq.n	8002fd2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3740      	adds	r7, #64	; 0x40
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	4613      	mov	r3, r2
 80030a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	88fa      	ldrh	r2, [r7, #6]
 80030b4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	88fa      	ldrh	r2, [r7, #6]
 80030ba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2222      	movs	r2, #34	; 0x22
 80030c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d007      	beq.n	80030ea <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030e8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695a      	ldr	r2, [r3, #20]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f042 0201 	orr.w	r2, r2, #1
 80030f8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68da      	ldr	r2, [r3, #12]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f042 0220 	orr.w	r2, r2, #32
 8003108:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003118:	b480      	push	{r7}
 800311a:	b095      	sub	sp, #84	; 0x54
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	330c      	adds	r3, #12
 8003126:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800312a:	e853 3f00 	ldrex	r3, [r3]
 800312e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003132:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	330c      	adds	r3, #12
 800313e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003140:	643a      	str	r2, [r7, #64]	; 0x40
 8003142:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003144:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003146:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003148:	e841 2300 	strex	r3, r2, [r1]
 800314c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800314e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1e5      	bne.n	8003120 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3314      	adds	r3, #20
 800315a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	e853 3f00 	ldrex	r3, [r3]
 8003162:	61fb      	str	r3, [r7, #28]
   return(result);
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f023 0301 	bic.w	r3, r3, #1
 800316a:	64bb      	str	r3, [r7, #72]	; 0x48
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	3314      	adds	r3, #20
 8003172:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003174:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003176:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003178:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800317a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800317c:	e841 2300 	strex	r3, r2, [r1]
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1e5      	bne.n	8003154 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318c:	2b01      	cmp	r3, #1
 800318e:	d119      	bne.n	80031c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	330c      	adds	r3, #12
 8003196:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	e853 3f00 	ldrex	r3, [r3]
 800319e:	60bb      	str	r3, [r7, #8]
   return(result);
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f023 0310 	bic.w	r3, r3, #16
 80031a6:	647b      	str	r3, [r7, #68]	; 0x44
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	330c      	adds	r3, #12
 80031ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031b0:	61ba      	str	r2, [r7, #24]
 80031b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b4:	6979      	ldr	r1, [r7, #20]
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	e841 2300 	strex	r3, r2, [r1]
 80031bc:	613b      	str	r3, [r7, #16]
   return(result);
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1e5      	bne.n	8003190 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80031d2:	bf00      	nop
 80031d4:	3754      	adds	r7, #84	; 0x54
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b084      	sub	sp, #16
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f7ff fecb 	bl	8002f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031fe:	bf00      	nop
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003206:	b480      	push	{r7}
 8003208:	b085      	sub	sp, #20
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b21      	cmp	r3, #33	; 0x21
 8003218:	d13e      	bne.n	8003298 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003222:	d114      	bne.n	800324e <UART_Transmit_IT+0x48>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d110      	bne.n	800324e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	881b      	ldrh	r3, [r3, #0]
 8003236:	461a      	mov	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003240:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	1c9a      	adds	r2, r3, #2
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	621a      	str	r2, [r3, #32]
 800324c:	e008      	b.n	8003260 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	1c59      	adds	r1, r3, #1
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6211      	str	r1, [r2, #32]
 8003258:	781a      	ldrb	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003264:	b29b      	uxth	r3, r3
 8003266:	3b01      	subs	r3, #1
 8003268:	b29b      	uxth	r3, r3
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	4619      	mov	r1, r3
 800326e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10f      	bne.n	8003294 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003282:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003292:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	e000      	b.n	800329a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003298:	2302      	movs	r3, #2
  }
}
 800329a:	4618      	mov	r0, r3
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2220      	movs	r2, #32
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7ff fe5a 	bl	8002f80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b08c      	sub	sp, #48	; 0x30
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b22      	cmp	r3, #34	; 0x22
 80032e8:	f040 80ab 	bne.w	8003442 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f4:	d117      	bne.n	8003326 <UART_Receive_IT+0x50>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d113      	bne.n	8003326 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80032fe:	2300      	movs	r3, #0
 8003300:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003306:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	b29b      	uxth	r3, r3
 8003310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003314:	b29a      	uxth	r2, r3
 8003316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003318:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331e:	1c9a      	adds	r2, r3, #2
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	629a      	str	r2, [r3, #40]	; 0x28
 8003324:	e026      	b.n	8003374 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800332c:	2300      	movs	r3, #0
 800332e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003338:	d007      	beq.n	800334a <UART_Receive_IT+0x74>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10a      	bne.n	8003358 <UART_Receive_IT+0x82>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d106      	bne.n	8003358 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	b2da      	uxtb	r2, r3
 8003352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003354:	701a      	strb	r2, [r3, #0]
 8003356:	e008      	b.n	800336a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	b2db      	uxtb	r3, r3
 8003360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003364:	b2da      	uxtb	r2, r3
 8003366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003368:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003378:	b29b      	uxth	r3, r3
 800337a:	3b01      	subs	r3, #1
 800337c:	b29b      	uxth	r3, r3
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	4619      	mov	r1, r3
 8003382:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003384:	2b00      	cmp	r3, #0
 8003386:	d15a      	bne.n	800343e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0220 	bic.w	r2, r2, #32
 8003396:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	695a      	ldr	r2, [r3, #20]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0201 	bic.w	r2, r2, #1
 80033b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d135      	bne.n	8003434 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	330c      	adds	r3, #12
 80033d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	e853 3f00 	ldrex	r3, [r3]
 80033dc:	613b      	str	r3, [r7, #16]
   return(result);
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f023 0310 	bic.w	r3, r3, #16
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	330c      	adds	r3, #12
 80033ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ee:	623a      	str	r2, [r7, #32]
 80033f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f2:	69f9      	ldr	r1, [r7, #28]
 80033f4:	6a3a      	ldr	r2, [r7, #32]
 80033f6:	e841 2300 	strex	r3, r2, [r1]
 80033fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1e5      	bne.n	80033ce <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0310 	and.w	r3, r3, #16
 800340c:	2b10      	cmp	r3, #16
 800340e:	d10a      	bne.n	8003426 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003410:	2300      	movs	r3, #0
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800342a:	4619      	mov	r1, r3
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7ff fdbb 	bl	8002fa8 <HAL_UARTEx_RxEventCallback>
 8003432:	e002      	b.n	800343a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7fd fc0f 	bl	8000c58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	e002      	b.n	8003444 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	e000      	b.n	8003444 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003442:	2302      	movs	r3, #2
  }
}
 8003444:	4618      	mov	r0, r3
 8003446:	3730      	adds	r7, #48	; 0x30
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800344c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003450:	b0c0      	sub	sp, #256	; 0x100
 8003452:	af00      	add	r7, sp, #0
 8003454:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003468:	68d9      	ldr	r1, [r3, #12]
 800346a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	ea40 0301 	orr.w	r3, r0, r1
 8003474:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	431a      	orrs	r2, r3
 8003484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	431a      	orrs	r2, r3
 800348c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80034a4:	f021 010c 	bic.w	r1, r1, #12
 80034a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034b2:	430b      	orrs	r3, r1
 80034b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80034c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c6:	6999      	ldr	r1, [r3, #24]
 80034c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	ea40 0301 	orr.w	r3, r0, r1
 80034d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	4b8f      	ldr	r3, [pc, #572]	; (8003718 <UART_SetConfig+0x2cc>)
 80034dc:	429a      	cmp	r2, r3
 80034de:	d005      	beq.n	80034ec <UART_SetConfig+0xa0>
 80034e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	4b8d      	ldr	r3, [pc, #564]	; (800371c <UART_SetConfig+0x2d0>)
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d104      	bne.n	80034f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034ec:	f7ff f996 	bl	800281c <HAL_RCC_GetPCLK2Freq>
 80034f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034f4:	e003      	b.n	80034fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034f6:	f7ff f97d 	bl	80027f4 <HAL_RCC_GetPCLK1Freq>
 80034fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003508:	f040 810c 	bne.w	8003724 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800350c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003510:	2200      	movs	r2, #0
 8003512:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003516:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800351a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800351e:	4622      	mov	r2, r4
 8003520:	462b      	mov	r3, r5
 8003522:	1891      	adds	r1, r2, r2
 8003524:	65b9      	str	r1, [r7, #88]	; 0x58
 8003526:	415b      	adcs	r3, r3
 8003528:	65fb      	str	r3, [r7, #92]	; 0x5c
 800352a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800352e:	4621      	mov	r1, r4
 8003530:	eb12 0801 	adds.w	r8, r2, r1
 8003534:	4629      	mov	r1, r5
 8003536:	eb43 0901 	adc.w	r9, r3, r1
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003546:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800354a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800354e:	4690      	mov	r8, r2
 8003550:	4699      	mov	r9, r3
 8003552:	4623      	mov	r3, r4
 8003554:	eb18 0303 	adds.w	r3, r8, r3
 8003558:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800355c:	462b      	mov	r3, r5
 800355e:	eb49 0303 	adc.w	r3, r9, r3
 8003562:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003572:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003576:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800357a:	460b      	mov	r3, r1
 800357c:	18db      	adds	r3, r3, r3
 800357e:	653b      	str	r3, [r7, #80]	; 0x50
 8003580:	4613      	mov	r3, r2
 8003582:	eb42 0303 	adc.w	r3, r2, r3
 8003586:	657b      	str	r3, [r7, #84]	; 0x54
 8003588:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800358c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003590:	f7fc fe1a 	bl	80001c8 <__aeabi_uldivmod>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4b61      	ldr	r3, [pc, #388]	; (8003720 <UART_SetConfig+0x2d4>)
 800359a:	fba3 2302 	umull	r2, r3, r3, r2
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	011c      	lsls	r4, r3, #4
 80035a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035a6:	2200      	movs	r2, #0
 80035a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80035b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80035b4:	4642      	mov	r2, r8
 80035b6:	464b      	mov	r3, r9
 80035b8:	1891      	adds	r1, r2, r2
 80035ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80035bc:	415b      	adcs	r3, r3
 80035be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80035c4:	4641      	mov	r1, r8
 80035c6:	eb12 0a01 	adds.w	sl, r2, r1
 80035ca:	4649      	mov	r1, r9
 80035cc:	eb43 0b01 	adc.w	fp, r3, r1
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035e4:	4692      	mov	sl, r2
 80035e6:	469b      	mov	fp, r3
 80035e8:	4643      	mov	r3, r8
 80035ea:	eb1a 0303 	adds.w	r3, sl, r3
 80035ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035f2:	464b      	mov	r3, r9
 80035f4:	eb4b 0303 	adc.w	r3, fp, r3
 80035f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003608:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800360c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003610:	460b      	mov	r3, r1
 8003612:	18db      	adds	r3, r3, r3
 8003614:	643b      	str	r3, [r7, #64]	; 0x40
 8003616:	4613      	mov	r3, r2
 8003618:	eb42 0303 	adc.w	r3, r2, r3
 800361c:	647b      	str	r3, [r7, #68]	; 0x44
 800361e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003622:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003626:	f7fc fdcf 	bl	80001c8 <__aeabi_uldivmod>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	4611      	mov	r1, r2
 8003630:	4b3b      	ldr	r3, [pc, #236]	; (8003720 <UART_SetConfig+0x2d4>)
 8003632:	fba3 2301 	umull	r2, r3, r3, r1
 8003636:	095b      	lsrs	r3, r3, #5
 8003638:	2264      	movs	r2, #100	; 0x64
 800363a:	fb02 f303 	mul.w	r3, r2, r3
 800363e:	1acb      	subs	r3, r1, r3
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003646:	4b36      	ldr	r3, [pc, #216]	; (8003720 <UART_SetConfig+0x2d4>)
 8003648:	fba3 2302 	umull	r2, r3, r3, r2
 800364c:	095b      	lsrs	r3, r3, #5
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003654:	441c      	add	r4, r3
 8003656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800365a:	2200      	movs	r2, #0
 800365c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003660:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003664:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003668:	4642      	mov	r2, r8
 800366a:	464b      	mov	r3, r9
 800366c:	1891      	adds	r1, r2, r2
 800366e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003670:	415b      	adcs	r3, r3
 8003672:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003674:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003678:	4641      	mov	r1, r8
 800367a:	1851      	adds	r1, r2, r1
 800367c:	6339      	str	r1, [r7, #48]	; 0x30
 800367e:	4649      	mov	r1, r9
 8003680:	414b      	adcs	r3, r1
 8003682:	637b      	str	r3, [r7, #52]	; 0x34
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	f04f 0300 	mov.w	r3, #0
 800368c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003690:	4659      	mov	r1, fp
 8003692:	00cb      	lsls	r3, r1, #3
 8003694:	4651      	mov	r1, sl
 8003696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800369a:	4651      	mov	r1, sl
 800369c:	00ca      	lsls	r2, r1, #3
 800369e:	4610      	mov	r0, r2
 80036a0:	4619      	mov	r1, r3
 80036a2:	4603      	mov	r3, r0
 80036a4:	4642      	mov	r2, r8
 80036a6:	189b      	adds	r3, r3, r2
 80036a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036ac:	464b      	mov	r3, r9
 80036ae:	460a      	mov	r2, r1
 80036b0:	eb42 0303 	adc.w	r3, r2, r3
 80036b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80036c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80036c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80036cc:	460b      	mov	r3, r1
 80036ce:	18db      	adds	r3, r3, r3
 80036d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80036d2:	4613      	mov	r3, r2
 80036d4:	eb42 0303 	adc.w	r3, r2, r3
 80036d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80036e2:	f7fc fd71 	bl	80001c8 <__aeabi_uldivmod>
 80036e6:	4602      	mov	r2, r0
 80036e8:	460b      	mov	r3, r1
 80036ea:	4b0d      	ldr	r3, [pc, #52]	; (8003720 <UART_SetConfig+0x2d4>)
 80036ec:	fba3 1302 	umull	r1, r3, r3, r2
 80036f0:	095b      	lsrs	r3, r3, #5
 80036f2:	2164      	movs	r1, #100	; 0x64
 80036f4:	fb01 f303 	mul.w	r3, r1, r3
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	3332      	adds	r3, #50	; 0x32
 80036fe:	4a08      	ldr	r2, [pc, #32]	; (8003720 <UART_SetConfig+0x2d4>)
 8003700:	fba2 2303 	umull	r2, r3, r2, r3
 8003704:	095b      	lsrs	r3, r3, #5
 8003706:	f003 0207 	and.w	r2, r3, #7
 800370a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4422      	add	r2, r4
 8003712:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003714:	e105      	b.n	8003922 <UART_SetConfig+0x4d6>
 8003716:	bf00      	nop
 8003718:	40011000 	.word	0x40011000
 800371c:	40011400 	.word	0x40011400
 8003720:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003724:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003728:	2200      	movs	r2, #0
 800372a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800372e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003732:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003736:	4642      	mov	r2, r8
 8003738:	464b      	mov	r3, r9
 800373a:	1891      	adds	r1, r2, r2
 800373c:	6239      	str	r1, [r7, #32]
 800373e:	415b      	adcs	r3, r3
 8003740:	627b      	str	r3, [r7, #36]	; 0x24
 8003742:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003746:	4641      	mov	r1, r8
 8003748:	1854      	adds	r4, r2, r1
 800374a:	4649      	mov	r1, r9
 800374c:	eb43 0501 	adc.w	r5, r3, r1
 8003750:	f04f 0200 	mov.w	r2, #0
 8003754:	f04f 0300 	mov.w	r3, #0
 8003758:	00eb      	lsls	r3, r5, #3
 800375a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800375e:	00e2      	lsls	r2, r4, #3
 8003760:	4614      	mov	r4, r2
 8003762:	461d      	mov	r5, r3
 8003764:	4643      	mov	r3, r8
 8003766:	18e3      	adds	r3, r4, r3
 8003768:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800376c:	464b      	mov	r3, r9
 800376e:	eb45 0303 	adc.w	r3, r5, r3
 8003772:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003782:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003786:	f04f 0200 	mov.w	r2, #0
 800378a:	f04f 0300 	mov.w	r3, #0
 800378e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003792:	4629      	mov	r1, r5
 8003794:	008b      	lsls	r3, r1, #2
 8003796:	4621      	mov	r1, r4
 8003798:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800379c:	4621      	mov	r1, r4
 800379e:	008a      	lsls	r2, r1, #2
 80037a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80037a4:	f7fc fd10 	bl	80001c8 <__aeabi_uldivmod>
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4b60      	ldr	r3, [pc, #384]	; (8003930 <UART_SetConfig+0x4e4>)
 80037ae:	fba3 2302 	umull	r2, r3, r3, r2
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	011c      	lsls	r4, r3, #4
 80037b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ba:	2200      	movs	r2, #0
 80037bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80037c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80037c8:	4642      	mov	r2, r8
 80037ca:	464b      	mov	r3, r9
 80037cc:	1891      	adds	r1, r2, r2
 80037ce:	61b9      	str	r1, [r7, #24]
 80037d0:	415b      	adcs	r3, r3
 80037d2:	61fb      	str	r3, [r7, #28]
 80037d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037d8:	4641      	mov	r1, r8
 80037da:	1851      	adds	r1, r2, r1
 80037dc:	6139      	str	r1, [r7, #16]
 80037de:	4649      	mov	r1, r9
 80037e0:	414b      	adcs	r3, r1
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037f0:	4659      	mov	r1, fp
 80037f2:	00cb      	lsls	r3, r1, #3
 80037f4:	4651      	mov	r1, sl
 80037f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037fa:	4651      	mov	r1, sl
 80037fc:	00ca      	lsls	r2, r1, #3
 80037fe:	4610      	mov	r0, r2
 8003800:	4619      	mov	r1, r3
 8003802:	4603      	mov	r3, r0
 8003804:	4642      	mov	r2, r8
 8003806:	189b      	adds	r3, r3, r2
 8003808:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800380c:	464b      	mov	r3, r9
 800380e:	460a      	mov	r2, r1
 8003810:	eb42 0303 	adc.w	r3, r2, r3
 8003814:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	67bb      	str	r3, [r7, #120]	; 0x78
 8003822:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003830:	4649      	mov	r1, r9
 8003832:	008b      	lsls	r3, r1, #2
 8003834:	4641      	mov	r1, r8
 8003836:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800383a:	4641      	mov	r1, r8
 800383c:	008a      	lsls	r2, r1, #2
 800383e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003842:	f7fc fcc1 	bl	80001c8 <__aeabi_uldivmod>
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	4b39      	ldr	r3, [pc, #228]	; (8003930 <UART_SetConfig+0x4e4>)
 800384c:	fba3 1302 	umull	r1, r3, r3, r2
 8003850:	095b      	lsrs	r3, r3, #5
 8003852:	2164      	movs	r1, #100	; 0x64
 8003854:	fb01 f303 	mul.w	r3, r1, r3
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	3332      	adds	r3, #50	; 0x32
 800385e:	4a34      	ldr	r2, [pc, #208]	; (8003930 <UART_SetConfig+0x4e4>)
 8003860:	fba2 2303 	umull	r2, r3, r2, r3
 8003864:	095b      	lsrs	r3, r3, #5
 8003866:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800386a:	441c      	add	r4, r3
 800386c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003870:	2200      	movs	r2, #0
 8003872:	673b      	str	r3, [r7, #112]	; 0x70
 8003874:	677a      	str	r2, [r7, #116]	; 0x74
 8003876:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800387a:	4642      	mov	r2, r8
 800387c:	464b      	mov	r3, r9
 800387e:	1891      	adds	r1, r2, r2
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	415b      	adcs	r3, r3
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800388a:	4641      	mov	r1, r8
 800388c:	1851      	adds	r1, r2, r1
 800388e:	6039      	str	r1, [r7, #0]
 8003890:	4649      	mov	r1, r9
 8003892:	414b      	adcs	r3, r1
 8003894:	607b      	str	r3, [r7, #4]
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038a2:	4659      	mov	r1, fp
 80038a4:	00cb      	lsls	r3, r1, #3
 80038a6:	4651      	mov	r1, sl
 80038a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038ac:	4651      	mov	r1, sl
 80038ae:	00ca      	lsls	r2, r1, #3
 80038b0:	4610      	mov	r0, r2
 80038b2:	4619      	mov	r1, r3
 80038b4:	4603      	mov	r3, r0
 80038b6:	4642      	mov	r2, r8
 80038b8:	189b      	adds	r3, r3, r2
 80038ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80038bc:	464b      	mov	r3, r9
 80038be:	460a      	mov	r2, r1
 80038c0:	eb42 0303 	adc.w	r3, r2, r3
 80038c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	663b      	str	r3, [r7, #96]	; 0x60
 80038d0:	667a      	str	r2, [r7, #100]	; 0x64
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80038de:	4649      	mov	r1, r9
 80038e0:	008b      	lsls	r3, r1, #2
 80038e2:	4641      	mov	r1, r8
 80038e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038e8:	4641      	mov	r1, r8
 80038ea:	008a      	lsls	r2, r1, #2
 80038ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038f0:	f7fc fc6a 	bl	80001c8 <__aeabi_uldivmod>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4b0d      	ldr	r3, [pc, #52]	; (8003930 <UART_SetConfig+0x4e4>)
 80038fa:	fba3 1302 	umull	r1, r3, r3, r2
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	2164      	movs	r1, #100	; 0x64
 8003902:	fb01 f303 	mul.w	r3, r1, r3
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	3332      	adds	r3, #50	; 0x32
 800390c:	4a08      	ldr	r2, [pc, #32]	; (8003930 <UART_SetConfig+0x4e4>)
 800390e:	fba2 2303 	umull	r2, r3, r2, r3
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	f003 020f 	and.w	r2, r3, #15
 8003918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4422      	add	r2, r4
 8003920:	609a      	str	r2, [r3, #8]
}
 8003922:	bf00      	nop
 8003924:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003928:	46bd      	mov	sp, r7
 800392a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800392e:	bf00      	nop
 8003930:	51eb851f 	.word	0x51eb851f

08003934 <__libc_init_array>:
 8003934:	b570      	push	{r4, r5, r6, lr}
 8003936:	4d0d      	ldr	r5, [pc, #52]	; (800396c <__libc_init_array+0x38>)
 8003938:	4c0d      	ldr	r4, [pc, #52]	; (8003970 <__libc_init_array+0x3c>)
 800393a:	1b64      	subs	r4, r4, r5
 800393c:	10a4      	asrs	r4, r4, #2
 800393e:	2600      	movs	r6, #0
 8003940:	42a6      	cmp	r6, r4
 8003942:	d109      	bne.n	8003958 <__libc_init_array+0x24>
 8003944:	4d0b      	ldr	r5, [pc, #44]	; (8003974 <__libc_init_array+0x40>)
 8003946:	4c0c      	ldr	r4, [pc, #48]	; (8003978 <__libc_init_array+0x44>)
 8003948:	f000 f820 	bl	800398c <_init>
 800394c:	1b64      	subs	r4, r4, r5
 800394e:	10a4      	asrs	r4, r4, #2
 8003950:	2600      	movs	r6, #0
 8003952:	42a6      	cmp	r6, r4
 8003954:	d105      	bne.n	8003962 <__libc_init_array+0x2e>
 8003956:	bd70      	pop	{r4, r5, r6, pc}
 8003958:	f855 3b04 	ldr.w	r3, [r5], #4
 800395c:	4798      	blx	r3
 800395e:	3601      	adds	r6, #1
 8003960:	e7ee      	b.n	8003940 <__libc_init_array+0xc>
 8003962:	f855 3b04 	ldr.w	r3, [r5], #4
 8003966:	4798      	blx	r3
 8003968:	3601      	adds	r6, #1
 800396a:	e7f2      	b.n	8003952 <__libc_init_array+0x1e>
 800396c:	080039c4 	.word	0x080039c4
 8003970:	080039c4 	.word	0x080039c4
 8003974:	080039c4 	.word	0x080039c4
 8003978:	080039c8 	.word	0x080039c8

0800397c <memset>:
 800397c:	4402      	add	r2, r0
 800397e:	4603      	mov	r3, r0
 8003980:	4293      	cmp	r3, r2
 8003982:	d100      	bne.n	8003986 <memset+0xa>
 8003984:	4770      	bx	lr
 8003986:	f803 1b01 	strb.w	r1, [r3], #1
 800398a:	e7f9      	b.n	8003980 <memset+0x4>

0800398c <_init>:
 800398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398e:	bf00      	nop
 8003990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003992:	bc08      	pop	{r3}
 8003994:	469e      	mov	lr, r3
 8003996:	4770      	bx	lr

08003998 <_fini>:
 8003998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399a:	bf00      	nop
 800399c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399e:	bc08      	pop	{r3}
 80039a0:	469e      	mov	lr, r3
 80039a2:	4770      	bx	lr
